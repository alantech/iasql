name: Deploy `run` to Production

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      commit_sha:
        description: Commit SHA
        required: false
        type: string
  repository_dispatch:
    types: [prod-deploy]

jobs:
  setup-build:
    runs-on: ubuntu-latest
    outputs:
      registry-image-tag: ${{ steps['set-registry-image-tag'].outputs['registry-image-tag'] }}
    steps:
      - id: set-registry-image-tag
        name: Set registry image tag
        run: |
          COMMIT_SHA=${{inputs.commit_sha}}
          echo "::set-output name=registry-image-tag::ghcr.io/iasql/dashboard:$(echo ${COMMIT_SHA:-$GITHUB_SHA})-run"

  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - setup-build
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./run
          push: true
          cache-from: type=gha
          cache-to: type=gha
          tags: ${{ needs.setup-build.outputs.registry-image-tag }}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - setup-build
      - build-and-push
    steps:
      - name: SSH into Production and Deploy
        env:
          PRODUCTION_PEM_B64: ${{ secrets.PRODUCTION_PEM_B64 }}
          DOCKER_URL: ${{ needs.setup-build.outputs.registry-image-tag }}
        run: |
          echo $PRODUCTION_PEM_B64 | base64 -d > production.pem
          chmod 700 production.pem
          # TODO: Figure out a secure way to log in to ghcr.io
          ssh -i production.pem -o "StrictHostKeyChecking no" ubuntu@pg.iasql.com "
            sudo apt update && sudo apt upgrade -y
            sudo docker pull $DOCKER_URL
            sudo docker container stop run
            sudo docker container rm run
            sudo docker run -d --env-file=.env -p 8888:8888 --name run $DOCKER_URL
            sudo docker image prune -af
          "
          rm production.pem

  notify:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs: # make sure the notification is sent AFTER the jobs you want included have completed
      - deploy
    if: ${{ always() }} # You always want to be notified: success, failure, or cancelled

    steps:
      - name: Notify
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.github_token }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}