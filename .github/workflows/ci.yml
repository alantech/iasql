# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [main, speed-up-tests]
  pull_request:
    branches: [main]

defaults:
  run:
    working-directory: ./engine

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # lint:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - uses: actions/checkout@v2

  #     # Set up Node.js
  #     - name: Use Node.js 16.x
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 16.x

  #     - name: Install dependencies
  #       run: yarn

  #     - name: Run linter check
  #       run: yarn lint

  # cli-style:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     # Rust is automatically set up and included by default according to: https://github.com/actions/starter-workflows/blob/master/ci/rust.yml
  #     # Run cargo fmt linting on the source code
  #     - name: Run style linter
  #       run: cd ../cli && cargo fmt -- --check

  setup-test:
    runs-on: ubuntu-latest
    outputs:
      test-modules: ${{ steps['set-test-modules'].outputs['test-modules'] }}
      set-test-module-names: ${{ steps['set-test-module-names'].outputs['test-module-names'] }}
    steps:
      - uses: actions/checkout@v2
      - run: yarn
      - id: set-test-modules
        name: Set modules tests
        run: >
          echo "::set-output name=test-modules::$(npx jest **/modules/aws-ecr-integration.ts **/modules/aws-elb-integration.ts --listTests --json | jq -c 'map({(. | split("/") | .[-1] | split(".") | .[0] | gsub( "-"; "_") | ascii_upcase | tostring): .}) | add')"
        # echo "::set-output name=test-modules::$(npx jest **/modules/* --listTests --json | jq -c 'map({(. | split("/") | .[-1] | split(".") | .[0]): .}) | add')"
      - id: set-test-module-names
        name: Set modules tests names
        # run: echo "::set-output name=test-module-names::$(npx jest **/modules/* --listTests --json | jq -c 'map(split("/") | .[-1] | split(".") | .[0])')"
        run: echo "::set-output name=test-module-names::$(npx jest **/modules/aws-ecr-integration.ts **/modules/aws-elb-integration.ts --listTests --json | jq -c 'map(split("/") | .[-1] | split(".") | .[0] | gsub( "-"; "_") | ascii_upcase | tostring)')"
      # - id: set-test-common
      #   name: Set common tests
      #   run: echo "::set-output name=test-common::$(yarn test --testPathIgnorePatterns **/modules/* --listTests --json)"

  test:
    runs-on: ubuntu-latest

    needs:
      - setup-test

    name: test (${{ matrix.module }})

    strategy:
      matrix:
        module: ${{ fromJson(needs.setup-test.outputs['set-test-module-names']) }}

    env:
      MATRIX_AWS_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID_${{matrix.module}}
      MATRIX_AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY_${{matrix.module}} 

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install dependencies
        run: yarn

      - name: Run modules tests
        run:  yarn coverage $(echo $MODULES | jq -r '."${{matrix.module}}"')
        env:
          MODULES: ${{ needs.setup-test.outputs['test-modules'] }}
          AWS_ACCESS_KEY_ID: ${{ secrets[env.MATRIX_AWS_ACCESS_KEY_ID] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.MATRIX_AWS_SECRET_ACCESS_KEY] }}
          IRONPLANS_TOKEN: ${{ secrets.IRONPLANS_TOKEN }}
          AWS_REGION: us-east-1
          DB_HOST: localhost


      # - name: Run tests
      #   run: yarn coverage
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     IRONPLANS_TOKEN: ${{ secrets.IRONPLANS_TOKEN }}
      #     AWS_REGION: us-east-1
      #     DB_HOST: localhost

  # docs:
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Check out repo
  #       uses: actions/checkout@v2
  #     # Node is required for npm
  #     - name: Set up Node
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #     # Install and build Docusaurus website
  #     - name: Build Docusaurus website
  #       run: |
  #         cd ../docs
  #         yarn
  #         yarn build
