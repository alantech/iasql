# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

defaults:
  run:
    working-directory: ./engine

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  lint:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up Node.js
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install dependencies
        run: yarn

      - name: Run linter check
        run: yarn lint

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install dependencies
        run: yarn

      - name: Run tests
        run: yarn test

  db:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up Node.js
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install dependencies
        run: yarn

      - name: Docker build and run --detach
        run: |
          echo AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} > .env
          echo AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} >> .env
          echo AWS_REGION=${AWS_REGION} >> .env
          echo A0_ENABLED=${A0_ENABLED} >> .env
          echo A0_DOMAIN=${A0_DOMAIN} >> .env
          echo A0_AUDIENCE=${A0_AUDIENCE} >> .env
          docker-compose up --build --detach
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          A0_ENABLED: true
          A0_DOMAIN: https://auth.iasql.com/
          A0_AUDIENCE: https://api.iasql.com

      - name: Docker ps -a
        run: docker ps -a

      # Waiting for listening port
      - name: Health
        run: while ! curl --output /dev/null --silent --head --fail http://localhost:8088/health; do sleep 1 && echo -n .; done;

      # Check that all migrations are applied
      - name: Create
        run: |
          curl -H 'authorization: Bearer ${{ secrets.A0_IASQL_API_TOKEN }}' -f -s -S http://localhost:8088/v1/db/create/__example__

      - name: Check
        run: |
          curl -H 'authorization: Bearer ${{ secrets.A0_IASQL_API_TOKEN }}' -f -s -S http://localhost:8088/v1/db/check/__example__

      - name: Delete
        run: |
          curl -H 'authorization: Bearer ${{ secrets.A0_IASQL_API_TOKEN }}' -f -s -S http://localhost:8088/v1/db/delete/__example__

      - name: Logs
        if: always()
        run: docker logs $(docker ps -aq | head -n 1)

      - name: Docker stop
        run: docker stop $(docker ps -q)
