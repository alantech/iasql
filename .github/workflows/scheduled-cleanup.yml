name: Clean-up AWS accounts on a CRON Schedule

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch.
on:
  push:
    branches: [clean-test]
  schedule:
    # Runs "daily at 6am UTC - 11pm PDT - 1am CDT - 8am CEST"
    # - cron: '0 6 * * *'
    - cron: '25 9 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  setup-module-cleanup:
    runs-on: ubuntu-latest
    outputs:
      test-modules: ${{ steps['set-test-modules'].outputs['test-modules'] }}
      set-test-module-names: ${{ steps['set-test-module-names'].outputs['test-module-names'] }}
    steps:
      - uses: actions/checkout@v2
      - run: yarn
      - id: set-test-modules
        name: Set modules tests
        run: >
          echo "::set-output name=test-modules::$(npx jest **/modules/* --listTests --json | jq -c 'map({(. | split("/") | .[-1] | split(".") | .[0] | gsub( "-"; "_") | ascii_upcase | tostring): .}) | add')"
      - id: set-test-module-names
        name: Set modules tests names
        run: echo "::set-output name=test-module-names::$(npx jest **/modules/* --listTests --json | jq -c 'map(split("/") | .[-1] | split(".") | .[0] | gsub( "-"; "_") | ascii_upcase | tostring)')"

  module-cleanup-1:
    needs:
      - setup-module-cleanup
    uses: iasql/iasql-engine/.github/workflows/module-cleanup.yml@clean-test
    with:
      modules: needs.setup-module-cleanup.outputs['set-test-module-names']
      regions: "['ap-northeast-1']"

      # - name: Run modules tests
      #   run: yarn coverage $(echo $MODULES | jq -r '."${{matrix.module}}"')
      #   env:
      #     IASQL_ENV: test
      #     MODULES: ${{ needs.setup-module-cleanup.outputs['test-modules'] }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets[env.MATRIX_AWS_ACCESS_KEY_ID] }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets[env.MATRIX_AWS_SECRET_ACCESS_KEY] }}
      #     AWS_REGION: ${{ matrix.region }}

  # notify:
  #     name: Discord Notification
  #     runs-on: ubuntu-latest
  #     needs: # make sure the notification is sent AFTER the jobs you want included have completed
  #       - deploy
  #     if: ${{ always() }} # You always want to be notified: success, failure, or cancelled

  #     steps:
  #       - name: Notify
  #         uses: nobrayner/discord-webhook@v1
  #         with:
  #           github-token: ${{ secrets.github_token }}
  #           discord-webhook: ${{ secrets.DISCORD_WEBHOOK }