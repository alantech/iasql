name: Clean-up AWS accounts on a CRON Schedule

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch.
on:
  push:
    branches: [clean-test]
  schedule:
    # Runs "daily at 6am UTC - 11pm PDT - 1am CDT - 8am CEST"
    # - cron: '0 6 * * *'
    - cron: '25 9 * * *'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  setup-module-cleanup:
    runs-on: ubuntu-latest
    outputs:
      test-modules: ${{ steps['set-test-modules'].outputs['test-modules'] }}
      set-test-module-names: ${{ steps['set-test-module-names'].outputs['test-module-names'] }}
    steps:
      - uses: actions/checkout@v2
      - run: yarn
      - id: set-test-modules
        name: Set modules tests
        run: >
          echo "::set-output name=test-modules::$(npx jest **/modules/* --listTests --json | jq -c 'map({(. | split("/") | .[-1] | split(".") | .[0] | gsub( "-"; "_") | ascii_upcase | tostring): .}) | add')"
      - id: set-test-module-names
        name: Set modules tests names
        run: echo "::set-output name=test-module-names::$(npx jest **/modules/* --listTests --json | jq -c 'map(split("/") | .[-1] | split(".") | .[0] | gsub( "-"; "_") | ascii_upcase | tostring)')"

  module-cleanup:
    runs-on: ubuntu-latest
    needs:
      - setup-module-cleanup
    name: module test ${{ matrix.module }} ${{ matrix.region }}
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(needs.setup-module-cleanup.outputs['set-test-module-names']) }}
        region: ["ap-northeast-1"]
        # , "ap-northeast-2", "ap-northeast-3", "ap-south-1", "ap-southeast-1", "ap-southeast-2", "ca-central-1", "eu-central-1", "eu-north-1", "eu-west-1", "eu-west-2", "eu-west-3", "sa-east-1", "us-east-2", "us-west-1", "us-west-2"]

    env:
      MATRIX_AWS_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID_${{matrix.module}}
      MATRIX_AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY_${{matrix.module}}

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Install dependencies
        run: yarn

      - name: Start local iasql engine
        run: |
          IASQL_ENV=ci docker-compose up --build --detach
          while ! curl --output /dev/null --silent --head --fail http://localhost:8088/health; do sleep 1 && echo -n .; done;

      - name: Create iasql database
        run: |
          echo "\nCreating an iasql db..."
          curl http://localhost:8088/v1/db/connect/iasql

      - name: Set up iasql database
        run: |
          echo "\nInserting credentials..."
          psql postgres://postgres:test@localhost:5432/iasql -c "
            INSERT INTO aws_account (region, access_key_id, secret_access_key)
            VALUES ('${AWS_REGION}', '${AWS_ACCESS_KEY_ID}', '${AWS_SECRET_ACCESS_KEY}');
          ";
          echo "\Install all modules..."
          psql postgres://postgres:test@localhost:5432/iasql -c "
            select iasql_module_install(
              array(select module_name from iasql_modules_list() where module_name != 'aws_account' and module_name not like 'iasql_%')
            );
          ";
        env:
          AWS_REGION: ${{ matrix.region }}
          AWS_ACCESS_KEY_ID: ${{ secrets[env.MATRIX_AWS_ACCESS_KEY_ID] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.MATRIX_AWS_SECRET_ACCESS_KEY] }}

      - name: Run cleaning script
        run: |
          echo "\nDelete all records..."
          psql postgres://postgres:test@localhost:5432/iasql -f test/sql/delete_records.sql -c "select * from iasql_apply();"

      - name: Local engine logs
        if: always()
        run: docker logs iasql-engine_change_engine_1

      - name: Local psql logs
        if: always()
        run: docker logs iasql-engine_postgresql_1

      # - name: Run modules tests
      #   run: yarn coverage $(echo $MODULES | jq -r '."${{matrix.module}}"')
      #   env:
      #     IASQL_ENV: test
      #     MODULES: ${{ needs.setup-module-cleanup.outputs['test-modules'] }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets[env.MATRIX_AWS_ACCESS_KEY_ID] }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets[env.MATRIX_AWS_SECRET_ACCESS_KEY] }}
      #     AWS_REGION: ${{ matrix.region }}

  # notify:
  #     name: Discord Notification
  #     runs-on: ubuntu-latest
  #     needs: # make sure the notification is sent AFTER the jobs you want included have completed
  #       - deploy
  #     if: ${{ always() }} # You always want to be notified: success, failure, or cancelled

  #     steps:
  #       - name: Notify
  #         uses: nobrayner/discord-webhook@v1
  #         with:
  #           github-token: ${{ secrets.github_token }}
  #           discord-webhook: ${{ secrets.DISCORD_WEBHOOK }