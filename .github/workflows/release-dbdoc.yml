# This is a basic workflow to help you get started with Actions

name: Release DbDoc

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  repository_dispatch:
    types: [release]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js LTS
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'yarn'

      - name: Install dbdocs
        run: |
          sudo npm install -g dbdocs
          sudo npm install -g @dbml/cli

      - name: Check dbdocs
        run: dbdocs

      - name: Start local iasql container
        run: |
          docker build -t iasql:latest .
          docker run -p 9876:9876 -p 5432:5432 -e IASQL_ENV=ci --name iasql iasql:latest &
          while ! psql postgres://postgres:test@localhost:5432/iasql_metadata -b -q -c "SELECT iasql_engine_health()"; do sleep 1 && echo -n .; done;

      - name: Run generation script
        run: ./dbdoc-ci.sh
        env:
          DBDOCS_TOKEN: ${{ secrets.DBDOCS_TOKEN }}
          # no infrastructure changes so aws envs are irrelevant
          AWS_REGION: us-east-2
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_READONLY_TESTING }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_READONLY_TESTING }}
          DATABASE_URL: postgres://postgres:test@localhost:5432/iasql

      - name: Dump schema.prisma
        if: ${{ always() }}
        run: cat examples/ecs-fargate/prisma/infra/prisma/schema.prisma

      - name: Dump iasql.dbml
        if: ${{ always() }}
        run: cat examples/ecs-fargate/prisma/infra/prisma/dbml/iasql.dbml

  notify:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs: # make sure the notification is sent AFTER the jobs you want included have completed
      - update
    if: ${{ always() }} # You always want to be notified: success, failure, or cancelled

    steps:
      - name: Notify
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.github_token }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}