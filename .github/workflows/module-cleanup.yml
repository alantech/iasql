name: Clean-up AWS accounts

# Reusable workflow
on:
  workflow_call:
    inputs:
      modules:
        required: true
        type: string
      regions:
        required: true
        type: string

jobs:
  module-cleanup:
    runs-on: ubuntu-latest
    name: ${{ matrix.module }} ${{ matrix.region }}
    strategy:
      fail-fast: false
      matrix:
        module: ${{ fromJson(inputs.modules) }}
        region: ${{ fromJson(inputs.regions) }}

    env:
      MATRIX_AWS_ACCESS_KEY_ID: AWS_ACCESS_KEY_ID_${{matrix.module}}
      MATRIX_AWS_SECRET_ACCESS_KEY: AWS_SECRET_ACCESS_KEY_${{matrix.module}}

    steps:
      - uses: actions/checkout@v2

      - name: Create database
        run: |
          echo "\nCreating ${DB_NAME} db..."
          curl http://localhost:8088/v1/db/connect/${DB_NAME}

      - name: Set up iasql database
        run: |
          echo "\nInstalling aws_account..."
          psql postgres://postgres:test@localhost:5432/${DB_NAME} -c "
            select iasql_install(
              'aws_account'
            );
          ";
          echo "\Attaching credentials..."
          psql postgres://postgres:test@localhost:5432/${DB_NAME} -c "
            INSERT INTO aws_account (region, access_key_id, secret_access_key)
            VALUES ('${AWS_REGION}', '${AWS_ACCESS_KEY_ID}', '${AWS_SECRET_ACCESS_KEY}');
          ";
          echo "\Install all modules..."
          psql postgres://postgres:test@localhost:5432/${DB_NAME} -c "
            select iasql_module_install(
              array(select module_name from iasql_modules_list() where module_name != 'aws_account' and module_name not like 'iasql_%')
            );
          ";
        env:
          AWS_REGION: ${{ matrix.region }}
          AWS_ACCESS_KEY_ID: ${{ secrets[env.MATRIX_AWS_ACCESS_KEY_ID] }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets[env.MATRIX_AWS_SECRET_ACCESS_KEY] }}
          DB_NAME: ${{ join(fromJSON('[matrix.module, matrix.region]', '_' ) }}

      - name: Run cleaning script
        run: |
          echo "\nDelete all records..."
          psql postgres://postgres:test@localhost:5432/${DB_NAME} -f test/sql/delete_records.sql -c "select * from iasql_apply();"
        env:
          DB_NAME: ${{ join(fromJSON('[matrix.module, matrix.region]', '_' ) }}

      - name: Local engine logs
        if: always()
        run: docker logs iasql-engine_change_engine_1

      - name: Local psql logs
        if: always()
        run: docker logs iasql-engine_postgresql_1

  # TODO: add DISCORD_WEBHOOK and notify
  # notify:
  #     name: Discord Notification
  #     runs-on: ubuntu-latest
  #     needs: # make sure the notification is sent AFTER the jobs you want included have completed
  #       - deploy
  #     if: ${{ always() }} # You always want to be notified: success, failure, or cancelled

  #     steps:
  #       - name: Notify
  #         uses: nobrayner/discord-webhook@v1
  #         with:
  #           github-token: ${{ secrets.github_token }}
  #           discord-webhook: ${{ secrets.DISCORD_WEBHOOK }