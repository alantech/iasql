import { execSync, } from 'child_process'

import * as iasql from '../../src/services/iasql'
import { getPrefix, query, runApply, finish, } from '../helpers'

jest.setTimeout(240000);

beforeAll(() => {
  execSync('cd test && docker-compose up -d && sleep 5');
});

afterAll(() => {
  execSync('cd test && docker-compose down');
});

const prefix = getPrefix();
const dbAlias = 'ecrtest';
const repositoryName = prefix + dbAlias;
const policyMock = '{ "Version": "2012-10-17", "Statement": [ { "Sid": "DenyPull", "Effect": "Deny", "Principal": "*", "Action": [ "ecr:BatchGetImage", "ecr:GetDownloadUrlForLayer" ] } ]}';
const updatePolicyMock = '{ "Version": "2012-10-17", "Statement": [ { "Sid": "DenyPull", "Effect": "Deny", "Principal": "*", "Action": [ "ecr:BatchGetImage" ] } ]}';

describe('ECR Integration Testing', () => {
  it('creates a new test db', (done) => void iasql.add(
    dbAlias,
    'us-west-2',
    process.env.AWS_ACCESS_KEY_ID ?? 'barf',
    process.env.AWS_SECRET_ACCESS_KEY ?? 'barf',
    'not-needed').then(...finish(done)));

  it('installs the ecr module', (done) => void iasql.install(
    ['aws_ecr'],
    dbAlias,
    'not-needed').then(...finish(done)));

  describe('private repository', () => {
    it('adds a new repository', query(`
      INSERT INTO aws_repository (repository_name, scan_on_push, image_tag_mutability)
      VALUES ('${repositoryName}', false, 'MUTABLE');
    `, dbAlias));
  
    it('applies the reporsitory change', (done) => runApply(done, dbAlias));
  
    it('tries to update a repository autogenerated field', query(`
      UPDATE aws_repository SET repository_arn = '${repositoryName}arn' WHERE repository_name = '${repositoryName}';
    `, dbAlias));

    it('applies change which will undo it', (done) => runApply(done, dbAlias));

    it('tries to update a repository field', query(`
      UPDATE aws_repository SET scan_on_push = true WHERE repository_name = '${repositoryName}';
    `, dbAlias));
  
    it('applies the change', (done) => runApply(done, dbAlias));
  
    it('adds a new repository policy', query(`
      INSERT INTO aws_repository_policy (repository_id, policy_text)
      VALUES
        SELECT id, '${policyMock}'
        FROM aws_repository
        WHERE repository_name = '${repositoryName}';
    `, dbAlias));
  
    it('applies the change', (done) => runApply(done, dbAlias));

    it('tries to update a repository policy autogenerated field', query(`
      UPDATE aws_repository_policy
      SET aws_repository_policy.registry_id = '${repositoryName}registry'
      FROM aws_repository
      WHERE aws_repository.repository_name = '${repositoryName}' AND aws_repository.id = aws_repository_policy.repository_id;
    `, dbAlias));

    it('applies change which will undo it', (done) => runApply(done, dbAlias));

    it('tries to update a repository field', query(`
      UPDATE aws_repository_policy
      SET aws_repository_policy.policy_text = '${updatePolicyMock}'
      FROM aws_repository
      WHERE aws_repository.repository_name = '${repositoryName}' AND aws_repository.id = aws_repository_policy.repository_id;
    `, dbAlias));
  
    it('applies the change', (done) => runApply(done, dbAlias));

    it('deletes the repository policy', query(`
      DELETE FROM aws_repository_policy
      USING aws_repository
      WHERE aws_repository.repository_name = '${repositoryName}' AND aws_repository.id = aws_repository_policy.repository_id;
    `, dbAlias));

    it('applies the log group change (last time)', (done) => runApply(done, dbAlias));

    it('deletes the repository', query(`
      DELETE FROM aws_repository
      WHERE repository_name = '${repositoryName}';
    `, dbAlias));
  
    it('applies the log group change (last time)', (done) => runApply(done, dbAlias));
  });

  it('deletes the test db', (done) => void iasql
    .remove(dbAlias, 'not-needed')
    .then(...finish(done)));
});
