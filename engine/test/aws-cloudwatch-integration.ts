import { execSync, } from 'child_process'

import { createConnection, } from 'typeorm'

import * as iasql from '../src/services/iasql'

jest.setTimeout(240000);

beforeAll(() => {
  execSync('cd test && docker-compose up -d && sleep 5');
});

afterAll(() => {
  execSync('cd test && docker-compose down');
});

function finish(done: (e?: any) => {}) {
  return [() => done(), (e: any) => { done(e); }];
}

const dbName = 'sgtest';

function runApply(done: (e?: any) => {}) {
  iasql.apply(dbName, false, 'not-needed').then(...finish(done));
}

function query(queryString: string) {
  return function (done: (e?: any) => {}) {
    console.log(queryString);
    createConnection({
      name: dbName,
      type: 'postgres',
      username: 'postgres',
      password: 'test',
      host: 'localhost',
      port: 5432,
      database: dbName,
      extra: { ssl: false, },
    }).then((conn) => {
      conn.query(queryString).then(() => {
        conn.close().then(...finish(done));
      }, (e) => {
        conn.close().then(() => done(e), (e2) => done(e2));
      });
    }, done);
  }
}

const chars = [
  Array(26).fill('a').map((c, i) => String.fromCharCode(c.charCodeAt() + i)),
  Array(26).fill('A').map((c, i) => String.fromCharCode(c.charCodeAt() + i)),
  Array(10).fill('0').map((c, i) => String.fromCharCode(c.charCodeAt() + i)),
].flat();
const randChar = (): string => chars[Math.floor(Math.random() * chars.length)];
const prefix = Array(7).fill('').map(() => randChar()).join('');

describe('AwsCloudwatch Integration Testing', () => {
  it('creates a new test db', (done) => void iasql.add(
    dbName,
    'us-west-2',
    process.env.AWS_ACCESS_KEY_ID ?? 'barf',
    process.env.AWS_SECRET_ACCESS_KEY ?? 'barf',
    'not-needed').then(...finish(done)));

  it('installs the cloudwatch module', (done) => void iasql.install(
    ['aws_cloudwatch'],
    dbName,
    'not-needed').then(...finish(done)));

  it('adds a new log group', query(`
    INSERT INTO log_group (log_group_name)
    VALUES ('${prefix}lgtest');
  `));

  it('applies the log group change', runApply);


  it('tries to update a log group autogenerated field', query(`
    UPDATE log_group SET log_group_arn = '${prefix}lgtest2' WHERE log_group_name = '${prefix}lgtest';
  `));

  it('applies the log group change which will undo the change', runApply);

  it('deletes the log group', query(`
    DELETE FROM log_group
    WHERE log_group_name = '${prefix}lgtest';
  `));

  it('applies the log group change (last time)', runApply);

  it('deletes the test db', (done) => void iasql
    .remove(dbName, 'not-needed')
    .then(...finish(done)));
});
