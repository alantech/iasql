import * as iasql from '../../src/services/iasql';
import {
  defaultRegion,
  execComposeDown,
  execComposeUp,
  finish,
  getPrefix,
  itDocs,
  runBegin,
  runCommit,
  runInstall,
  runQuery,
} from '../helpers';

const prefix = getPrefix();
const dbAlias = 'sqstest';

const begin = runBegin.bind(null, dbAlias);
const commit = runCommit.bind(null, dbAlias);
const query = runQuery.bind(null, dbAlias);
const install = runInstall.bind(null, dbAlias);
const region = defaultRegion();

const modules = ['aws_sqs'];

jest.setTimeout(360000);
beforeAll(async () => await execComposeUp());
afterAll(async () => await execComposeDown());

let username: string, password: string;
describe('AwsSQS Integration Testing', () => {
  it('creates a new test db', done => {
    (async () => {
      try {
        const { user, password: pgPassword } = await iasql.connect(dbAlias, 'not-needed', 'not-needed');
        username = user;
        password = pgPassword;
        if (!username || !password) throw new Error('Did not fetch pg credentials');
        done();
      } catch (e) {
        done(e);
      }
    })();
  });

  it('installs the aws_account module', install(['aws_account']));

  it(
    'inserts aws credentials',
    query(
      `
          INSERT INTO aws_credentials (access_key_id, secret_access_key)
          VALUES ('${process.env.AWS_ACCESS_KEY_ID}', '${process.env.AWS_SECRET_ACCESS_KEY}')
      `,
      undefined,
      false,
      () => ({ username, password }),
    ),
  );

  it('starts a transaction', begin());

  it('syncs the regions', commit());

  it(
    'sets the default region',
    query(
      `
          UPDATE aws_regions
          SET is_default = TRUE
          WHERE region = '${region}';
      `,
      undefined,
      true,
      () => ({ username, password }),
    ),
  );

  itDocs('installs the SQS module', install(modules));

  it('starts a transaction', begin());
  itDocs(
    'adds a new non-fifo queue',
    query(
      `
          INSERT INTO queue (name, fifo_queue, region) -- use autogenerated policy
          VALUES ('${prefix}', false, '${region}');
      `,
      undefined,
      true,
      () => ({ username, password }),
    ),
  );
  it('commits creation of the non-fifo queue', commit());

  itDocs(
    'checks the queue still exists after commit',
    query(
      `
      SELECT *
      FROM queue
      WHERE name = '${prefix}';
  `,
      (res: any) => {
        expect(res.length).toBe(1);
        // also, the policy should be auto-generated
        expect(res[0].policy).toBeTruthy();
        expect(res[0].policy.Statement[0].Action[0].toLowerCase()).toContain('sqs:*');
      },
    ),
  );

  it('starts a transaction', begin());
  it('creates a new fifo queue, but the name is problematic', () => {
    try {
      query(
        `
              INSERT INTO queue (name, fifo_queue, region)
              VALUES ('${prefix}', true, '${region}');
          `,
        undefined,
        true,
        () => ({ username, password }),
      );
    } catch (e: any) {
      expect(e?.message).toContain('The name of a fifo queue should end with .fifo');
    }
  });
  itDocs(
    'creates a new fifo queue, this time with a correct name',
    query(
      `
              INSERT INTO queue (name, fifo_queue, region)
              VALUES ('${prefix}.fifo', true, '${region}');
    `,
      undefined,
      true,
      () => ({ username, password }),
    ),
  );
  it('commits creation of fifo queue', commit());

  itDocs(
    'checks the fifo queue still exists after commit',
    query(
      `
      SELECT *
      FROM queue
      WHERE name = '${prefix}.fifo';
  `,
      (res: any) => {
        expect(res.length).toBe(1);
      },
    ),
  );

  it('starts a transaction', begin());
  itDocs(
    'moves the queue to non-default region',
    query(
      `
              UPDATE queue
              SET region = 'us-east-1'
              WHERE name = '${prefix}.fifo';
    `,
      undefined,
      true,
      () => ({ username, password }),
    ),
  );
  it('commits moving of queue to another region', commit());

  it(
    'checks the queue is still there after sync',
    query(
      `
      SELECT *
      FROM queue
      WHERE name = '${prefix}.fifo'
        AND region = 'us-east-1';
  `,
      (res: any) => {
        expect(res.length).toBe(1);
      },
    ),
  );

  it('starts a transaction', begin());
  itDocs(
    'deletes the queues',
    query(
      `
              DELETE
              FROM queue;
    `,
      undefined,
      true,
      () => ({ username, password }),
    ),
  );
  it('commits deletion of queue', commit());

  it(
    'makes sure there is no queues left',
    query(
      `
      SELECT *
      FROM queue;
  `,
      (res: any) => expect(res.length).toBe(0),
    ),
  );

  it('deletes the test db', done => void iasql.disconnect(dbAlias, 'not-needed').then(...finish(done)));
});
