import * as iasql from '../../src/services/iasql'
import { getPrefix, runQuery, runApply, finish, execComposeUp, execComposeDown, runSync, } from '../helpers'

const prefix = getPrefix();
const dbAlias = 'cwtest';
const logGroupName = `${prefix}lgtest`
const apply = runApply.bind(null, dbAlias);
const sync = runSync.bind(null, dbAlias);
const query = runQuery.bind(null, dbAlias);
const modules = ['aws_cloudwatch@0.0.1'];
const runComposeDown = execComposeDown.bind(null, { modules });

jest.setTimeout(240000);
beforeAll(execComposeUp);
afterAll(runComposeDown);

describe('AwsCloudwatch Integration Testing', () => {
  it('creates a new test db', (done) => void iasql.add(
    dbAlias,
    process.env.AWS_REGION ?? 'barf',
    process.env.AWS_ACCESS_KEY_ID ?? 'barf',
    process.env.AWS_SECRET_ACCESS_KEY ?? 'barf',
    'not-needed').then(...finish(done)));

  it('installs the cloudwatch module', (done) => void iasql.install(
    modules,
    dbAlias,
    'not-needed').then(...finish(done)));

  it('adds a new log group', query(`
    INSERT INTO log_group (log_group_name)
    VALUES ('${logGroupName}');
  `));

  it('sync before apply', sync);

  it('check no new log group', query(`
    SELECT *
    FROM log_group
    WHERE log_group_name = '${logGroupName}';
  `, (res: any[]) => expect(res.length).toBe(0)));
  
  it('adds a new log group', query(`
    INSERT INTO log_group (log_group_name)
    VALUES ('${logGroupName}');
  `));

  it('check adds a new log group', query(`
    SELECT *
    FROM log_group
    WHERE log_group_name = '${logGroupName}';
  `, (res: any[]) => expect(res.length).toBe(1)));

  it('applies the log group change', apply);

  it('uninstalls the cloudwatch module', (done) => void iasql.uninstall(
    modules,
    dbAlias,
    'not-needed').then(...finish(done)));

  it('installs the cloudwatch module', (done) => void iasql.install(
    modules,
    dbAlias,
    'not-needed').then(...finish(done)));

  it('tries to update a log group autogenerated field', query(`
    UPDATE log_group SET log_group_arn = '${logGroupName}2' WHERE log_group_name = '${logGroupName}';
  `));

  it('applies the log group change which will undo the change', apply);

  it('deletes the log group', query(`
    DELETE FROM log_group
    WHERE log_group_name = '${logGroupName}';
  `));

  it('applies the log group change (last time)', apply);

  it('check deletes the log group', query(`
    SELECT *
    FROM log_group
    WHERE log_group_name = '${logGroupName}';
  `, (res: any[]) => expect(res.length).toBe(0)));

  it('deletes the test db', (done) => void iasql
    .remove(dbAlias, 'not-needed')
    .then(...finish(done)));
});

describe('AwsCloudwatch install/uninstall', () => {
  it('creates a new test db', (done) => void iasql.add(
    dbAlias,
    'us-east-1', // Share region with common tests
    process.env.AWS_ACCESS_KEY_ID ?? 'barf',
    process.env.AWS_SECRET_ACCESS_KEY ?? 'barf',
    'not-needed').then(...finish(done)));

  it('installs the cloudwatch module', (done) => void iasql.install(
    modules,
    dbAlias,
    'not-needed').then(...finish(done)));

  it('uninstalls the cloudwatch module', (done) => void iasql.uninstall(
    modules,
    dbAlias,
    'not-needed').then(...finish(done)));

  it('installs all modules', (done) => void iasql.install(
    [],
    dbAlias,
    'not-needed',
    true).then(...finish(done)));

  it('uninstalls the cloudwatch module', (done) => void iasql.uninstall(
    ['aws_cloudwatch@0.0.1', 'aws_ecs_fargate@0.0.1'],
    dbAlias,
    'not-needed').then(...finish(done)));

  it('installs the cloudwatch module', (done) => void iasql.install(
    ['aws_cloudwatch@0.0.1',],
    dbAlias,
    'not-needed').then(...finish(done)));

  it('deletes the test db', (done) => void iasql
    .remove(dbAlias, 'not-needed')
    .then(...finish(done)));
});
