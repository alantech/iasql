
Description: 'Setup IaSQL'

###
### CloudFormation Interface Metadata
###

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: IaSQL Connection Setup
      Parameters:
      - pAwsRegion
      - pConnectionString
      - pIasqlBucket
    ParameterLabels:
      pAwsRegion:
        default: IaSQL AWS Region
      pConnectionString:
        default: IaSQL Connection String
      pIasqlBucket:
        default: IaSQL S3 Bucket

###
#### Template input parameters
####

Parameters:
  pAwsRegion:
    Type: String
    Description: Do not modify
  pConnectionString:
    Type: String
    Description: Do not modify
  pIasqlBucket:
    Type: String
    Description: Do not modify

Resources:

  ###
  ### IAM User
  ###
  rIamUser:
    Type: AWS::IAM::User
    DeletionPolicy: Retain
    Properties:
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags: 
        - Key: "iasql"
          Value: "true"
      UserName: !Sub ${AWS::StackName}-iasql-user-${pAwsRegion}

  ###
  ### IAM User Access Key
  ###
  rIamUserAccessKey:
    Type: AWS::IAM::AccessKey
    DeletionPolicy: Retain
    Properties:
      UserName: !Ref 'rIamUser'

  ####
  #### Lambda Role
  ####

  rLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-LambdaPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: CloudWatchLogsPermissions
              Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: !Sub 'arn:${AWS::Partition}:logs:*:*:*'
            - Sid: LambdaFunctionPermissionsforInvoke
              Effect: Allow
              Action:
                - lambda:InvokeFunction
                - lambda:InvokeAsync
              Resource: "arn:aws:lambda:*:*:function:*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole

  ####
  #### Lambda Functions
  ####

  rLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: rLambdaRole
    Properties:
      FunctionName: !Sub ${AWS::StackName}-LambdaFunction
      Role: !GetAtt rLambdaRole.Arn
      Environment:
        Variables:
          access_key_id: !Ref 'rIamUserAccessKey'
          secret_access_key: !GetAtt 'rIamUserAccessKey.SecretAccessKey'
          aws_region: !Ref 'pAwsRegion'
          connection_string: !Ref 'pConnectionString'
      Handler: index.handler
      Timeout: 60
      Runtime: nodejs14.x
      Code:
        S3Bucket: !Ref 'pIasqlBucket'
        S3Key: "iasqlConnectLambda.zip"
      Tags:
        -
          Key: "Lambda Function Name"
          Value: !Sub '${AWS::StackName}-LambdaFunction'

  rLambdaFunctionCaller:
    Type: AWS::Lambda::Function
    DependsOn: 
      - rLambdaRole
      - rLambdaFunction
    Properties:
      FunctionName: !Sub ${AWS::StackName}-LambdaFunction-Caller
      Handler: index.handler
      Role: !GetAtt rLambdaRole.Arn
      Runtime: nodejs14.x
      Timeout: 60
      Code:
        ZipFile: !Sub |
          const cfnResponse = require('cfn-response');
          const AWS = require('aws-sdk');
          AWS.config.region = '${pAwsRegion}';
          const lambda = new AWS.Lambda();

          exports.handler = function(event, context) {
            const params = {
              FunctionName: '${AWS::StackName}-LambdaFunction',
              InvocationType: 'RequestResponse',
              Payload: '{ "caller" : "true" }'
            };
            try {
              lambda.invoke(params, function(err, data) {
                let response;
                if (err) {
                  response = err.message ?? 'An error executing the function ocurred.';
                } else {
                  response = data.Payload;
                }
                const responseData = { Data: response };
                cfnResponse.send(event, context, cfnResponse.SUCCESS, responseData, 'rFunctionCaller');
              });
            } catch (e) {
              const responseData = { Data: e.message ?? 'An error executing the function ocurred.' }
              cfnResponse.send(event, context, cfnResponse.SUCCESS, responseData, 'rFunctionCaller');
            }
          };
    
  ####
  #### Lambda Function caller
  ####

  rFunctionCaller:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: rLambdaFunctionCaller
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt rLambdaFunctionCaller.Arn

Outputs:
  newDbResult:
    Description: New IaSql database result
    Value: !GetAtt rFunctionCaller.Data
