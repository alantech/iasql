# Generated by Django 4.1.1 on 2022-09-28 12:15

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name="Cluster",
            fields=[
                ("cluster_name", models.TextField(primary_key=True, serialize=False)),
                ("cluster_arn", models.TextField(blank=True, null=True)),
                ("cluster_status", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "cluster", "managed": False, },
        ),
        migrations.CreateModel(
            name="ContainerDefinition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.TextField()),
                ("image", models.TextField(blank=True, null=True)),
                ("tag", models.TextField(blank=True, null=True)),
                ("digest", models.TextField(blank=True, null=True)),
                ("essential", models.BooleanField()),
                ("cpu", models.IntegerField(blank=True, null=True)),
                ("memory", models.IntegerField(blank=True, null=True)),
                ("memory_reservation", models.IntegerField(blank=True, null=True)),
                ("host_port", models.IntegerField(blank=True, null=True)),
                ("container_port", models.IntegerField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                ("env_variables", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "container_definition", "managed": False, },
        ),
        migrations.CreateModel(
            name="IasqlModule",
            fields=[("name", models.TextField(primary_key=True, serialize=False)), ],
            options={"db_table": "iasql_module", "managed": False, },
        ),
        migrations.CreateModel(
            name="IasqlOperation",
            fields=[
                ("opid", models.UUIDField(primary_key=True, serialize=False)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("optype", models.TextField()),
                ("params", models.TextField()),
                ("output", models.TextField(blank=True, null=True)),
                ("err", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "iasql_operation", "managed": False, },
        ),
        migrations.CreateModel(
            name="IasqlTables",
            fields=[("table", models.TextField(primary_key=True, serialize=False)), ],
            options={"db_table": "iasql_tables", "managed": False, },
        ),
        migrations.CreateModel(
            name="Listener",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("listener_arn", models.TextField(blank=True, null=True)),
                ("port", models.IntegerField()),
                ("protocol", models.TextField()),
                ("action_type", models.TextField()),
                ("ssl_policy", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "listener", "managed": False, },
        ),
        migrations.CreateModel(
            name="LoadBalancer",
            fields=[
                (
                    "load_balancer_name",
                    models.TextField(primary_key=True, serialize=False),
                ),
                ("load_balancer_arn", models.TextField(blank=True, null=True)),
                ("dns_name", models.TextField(blank=True, null=True)),
                ("canonical_hosted_zone_id", models.TextField(blank=True, null=True)),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("scheme", models.TextField()),
                ("state", models.TextField(blank=True, null=True)),
                ("load_balancer_type", models.TextField()),
                ("subnets", models.TextField(blank=True, null=True)),
                ("availability_zones", models.TextField(blank=True, null=True)),
                ("ip_address_type", models.TextField()),
                ("customer_owned_ipv4_pool", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "load_balancer", "managed": False, },
        ),
        migrations.CreateModel(
            name="LogGroup",
            fields=[
                ("log_group_name", models.TextField(primary_key=True, serialize=False)),
                ("log_group_arn", models.TextField(blank=True, null=True)),
                ("creation_time", models.DateTimeField(blank=True, null=True)),
            ],
            options={"db_table": "log_group", "managed": False, },
        ),
        migrations.CreateModel(
            name="PublicRepository",
            fields=[
                (
                    "repository_name",
                    models.TextField(primary_key=True, serialize=False),
                ),
                ("repository_arn", models.TextField(blank=True, null=True)),
                ("registry_id", models.TextField(blank=True, null=True)),
                ("repository_uri", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={"db_table": "public_repository", "managed": False, },
        ),
        migrations.CreateModel(
            name="Repository",
            fields=[
                (
                    "repository_name",
                    models.TextField(primary_key=True, serialize=False),
                ),
                ("repository_arn", models.TextField(blank=True, null=True)),
                ("registry_id", models.TextField(blank=True, null=True)),
                ("repository_uri", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(blank=True, null=True)),
                ("image_tag_mutability", models.TextField()),
                ("scan_on_push", models.BooleanField()),
            ],
            options={"db_table": "repository", "managed": False, },
        ),
        migrations.CreateModel(
            name="RepositoryPolicy",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("registry_id", models.TextField(blank=True, null=True)),
                ("policy_text", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "repository_policy", "managed": False, },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                ("arn", models.TextField(blank=True, null=True)),
                ("role_name", models.TextField(primary_key=True, serialize=False)),
                ("assume_role_policy_document", models.JSONField()),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "attached_policies_arns",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), size=None
                    ),
                ),
            ],
            options={"db_table": "role", "managed": False, },
        ),
        migrations.CreateModel(
            name="SecurityGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("description", models.TextField()),
                ("group_name", models.TextField()),
                ("owner_id", models.TextField(blank=True, null=True)),
                ("group_id", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "security_group", "managed": False, },
        ),
        migrations.CreateModel(
            name="SecurityGroupRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("security_group_rule_id", models.TextField(blank=True, null=True)),
                ("is_egress", models.BooleanField()),
                ("ip_protocol", models.TextField()),
                ("from_port", models.IntegerField(blank=True, null=True)),
                ("to_port", models.IntegerField(blank=True, null=True)),
                ("cidr_ipv4", models.TextField(blank=True, null=True)),
                ("cidr_ipv6", models.TextField(blank=True, null=True)),
                ("prefix_list_id", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "security_group_rule", "managed": False, },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                ("name", models.TextField(primary_key=True, serialize=False)),
                ("arn", models.TextField(blank=True, null=True)),
                ("status", models.TextField(blank=True, null=True)),
                ("desired_count", models.IntegerField()),
                (
                    "subnets",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), size=None
                    ),
                ),
                ("assign_public_ip", models.TextField()),
            ],
            options={"db_table": "service", "managed": False, },
        ),
        migrations.CreateModel(
            name="Subnet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("state", models.TextField(blank=True, null=True)),
                (
                    "available_ip_address_count",
                    models.IntegerField(blank=True, null=True),
                ),
                ("cidr_block", models.TextField(blank=True, null=True)),
                ("subnet_id", models.TextField(blank=True, null=True)),
                ("owner_id", models.TextField(blank=True, null=True)),
                ("subnet_arn", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "subnet", "managed": False, },
        ),
        migrations.CreateModel(
            name="TargetGroup",
            fields=[
                (
                    "target_group_name",
                    models.TextField(primary_key=True, serialize=False),
                ),
                ("target_type", models.TextField()),
                ("target_group_arn", models.TextField(blank=True, null=True)),
                ("ip_address_type", models.TextField(blank=True, null=True)),
                ("protocol", models.TextField(blank=True, null=True)),
                ("port", models.IntegerField(blank=True, null=True)),
                ("health_check_protocol", models.TextField(blank=True, null=True)),
                ("health_check_port", models.TextField(blank=True, null=True)),
                ("health_check_enabled", models.BooleanField(blank=True, null=True)),
                (
                    "health_check_interval_seconds",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "health_check_timeout_seconds",
                    models.IntegerField(blank=True, null=True),
                ),
                ("healthy_threshold_count", models.IntegerField(blank=True, null=True)),
                (
                    "unhealthy_threshold_count",
                    models.IntegerField(blank=True, null=True),
                ),
                ("health_check_path", models.TextField(blank=True, null=True)),
                ("protocol_version", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "target_group", "managed": False, },
        ),
        migrations.CreateModel(
            name="TaskDefinition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("task_definition_arn", models.TextField(blank=True, null=True)),
                ("family", models.TextField()),
                ("revision", models.IntegerField(blank=True, null=True)),
                ("status", models.TextField(blank=True, null=True)),
                ("cpu_memory", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "task_definition", "managed": False, },
        ),
        migrations.CreateModel(
            name="Vpc",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("vpc_id", models.TextField(blank=True, null=True, unique=True)),
                ("cidr_block", models.TextField()),
                ("state", models.TextField(blank=True, null=True)),
                ("is_default", models.BooleanField()),
                ("tags", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "vpc", "managed": False, },
        ),
        migrations.CreateModel(
            name="IasqlDependencies",
            fields=[
                (
                    "module",
                    models.OneToOneField(
                        db_column="module",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="infra.iasqlmodule",
                    ),
                ),
            ],
            options={"db_table": "iasql_dependencies", "managed": False, },
        ),
        migrations.CreateModel(
            name="LoadBalancerSecurityGroups",
            fields=[
                (
                    "load_balancer_name",
                    models.OneToOneField(
                        db_column="load_balancer_name",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="infra.loadbalancer",
                    ),
                ),
            ],
            options={"db_table": "load_balancer_security_groups", "managed": False, },
        ),
        migrations.CreateModel(
            name="ServiceSecurityGroups",
            fields=[
                (
                    "service_name",
                    models.OneToOneField(
                        db_column="service_name",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        primary_key=True,
                        serialize=False,
                        to="infra.service",
                    ),
                ),
            ],
            options={"db_table": "service_security_groups", "managed": False, },
        ),
    ]
