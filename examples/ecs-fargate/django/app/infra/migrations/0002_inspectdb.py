# Generated by Django 4.1.1 on 2022-09-23 14:25

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("infra", "0001_install"),
    ]

    operations = [
        migrations.CreateModel(
            name="AvailabilityZone",
            fields=[("name", models.TextField(primary_key=True, serialize=False)),],
            options={"db_table": "availability_zone", "managed": False,},
        ),
        migrations.CreateModel(
            name="AwsCredentials",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("access_key_id", models.TextField()),
                ("secret_access_key", models.TextField()),
            ],
            options={"db_table": "aws_credentials", "managed": False,},
        ),
        migrations.CreateModel(
            name="AwsRegions",
            fields=[
                ("region", models.TextField(primary_key=True, serialize=False)),
                ("is_default", models.BooleanField()),
                ("is_enabled", models.BooleanField()),
            ],
            options={"db_table": "aws_regions", "managed": False,},
        ),
        migrations.CreateModel(
            name="Certificate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("arn", models.TextField(blank=True, null=True, unique=True)),
                ("certificate_id", models.TextField(blank=True, null=True)),
                ("domain_name", models.TextField()),
                ("certificate_type", models.TextField(blank=True, null=True)),
                ("status", models.TextField(blank=True, null=True)),
                ("renewal_eligibility", models.TextField(blank=True, null=True)),
                ("in_use", models.BooleanField()),
            ],
            options={"db_table": "certificate", "managed": False,},
        ),
        migrations.CreateModel(
            name="EcsSimplified",
            fields=[
                (
                    "app_name",
                    models.CharField(max_length=18, primary_key=True, serialize=False),
                ),
                ("desired_count", models.IntegerField()),
                ("app_port", models.IntegerField()),
                ("cpu_mem", models.TextField()),
                ("repository_uri", models.TextField(blank=True, null=True)),
                ("image_tag", models.TextField(blank=True, null=True)),
                ("image_digest", models.TextField(blank=True, null=True)),
                ("public_ip", models.BooleanField()),
                ("load_balancer_dns", models.TextField(blank=True, null=True)),
                ("force_new_deployment", models.BooleanField()),
                ("env_variables", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "ecs_simplified", "managed": False,},
        ),
        migrations.CreateModel(
            name="ElasticIp",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("allocation_id", models.TextField(blank=True, null=True)),
                ("public_ip", models.TextField(blank=True, null=True, unique=True)),
                ("tags", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "elastic_ip", "managed": False,},
        ),
        migrations.CreateModel(
            name="EndpointGateway",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("vpc_endpoint_id", models.TextField(blank=True, null=True)),
                ("service", models.TextField()),
                ("policy_document", models.TextField(blank=True, null=True)),
                ("state", models.TextField(blank=True, null=True)),
                ("route_table_ids", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "endpoint_gateway", "managed": False,},
        ),
        migrations.CreateModel(
            name="IasqlAuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("ts", models.DateTimeField()),
                ("user", models.TextField()),
                ("table_name", models.TextField()),
                ("change_type", models.TextField()),
                ("change", models.TextField()),
            ],
            options={"db_table": "iasql_audit_log", "managed": False,},
        ),
        migrations.CreateModel(
            name="IasqlRpc",
            fields=[
                ("opid", models.UUIDField(primary_key=True, serialize=False)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("module_name", models.TextField()),
                ("method_name", models.TextField()),
                ("params", models.TextField()),
                ("output", models.TextField(blank=True, null=True)),
                ("err", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "iasql_rpc", "managed": False,},
        ),
        migrations.CreateModel(
            name="NatGateway",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("nat_gateway_id", models.TextField(blank=True, null=True)),
                ("connectivity_type", models.TextField()),
                ("state", models.TextField(blank=True, null=True)),
                ("tags", models.TextField(blank=True, null=True)),
            ],
            options={"db_table": "nat_gateway", "managed": False,},
        ),
    ]
