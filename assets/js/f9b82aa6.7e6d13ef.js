"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[33016],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>b});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=a.createContext({}),u=function(e){var t=a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(r),m=n,b=d["".concat(i,".").concat(m)]||d[m]||p[m]||l;return r?a.createElement(b,s(s({ref:t},c),{},{components:r})):a.createElement(b,s({ref:t},c))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,s=new Array(l);s[0]=m;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[d]="string"==typeof e?e:n,s[1]=o;for(var u=2;u<l;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},85162:(e,t,r)=>{r.d(t,{Z:()=>s});var a=r(67294),n=r(86010);const l={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:r,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(l.tabItem,s),hidden:r},t)}},74866:(e,t,r)=>{r.d(t,{Z:()=>v});var a=r(87462),n=r(67294),l=r(86010),s=r(12466),o=r(16550),i=r(91980),u=r(67392),c=r(50012);function d(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:a,default:n}}=e;return{value:t,label:r,attributes:a,default:n}}))}function p(e){const{values:t,children:r}=e;return(0,n.useMemo)((()=>{const e=t??d(r);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:r}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,i._X)(l),(0,n.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function _(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,l=p(e),[s,o]=(0,n.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=r.find((e=>e.default))??r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[i,u]=b({queryString:r,groupId:a}),[d,_]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,c.Nk)(r);return[a,(0,n.useCallback)((e=>{r&&l.set(e)}),[r,l])]}({groupId:a}),E=(()=>{const e=i??d;return m({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{E&&o(E)}),[E]);return{selectedValue:s,selectValue:(0,n.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),_(e)}),[u,_,l]),tabValues:l}}var E=r(72389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:r,selectedValue:o,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),p=e=>{const t=e.currentTarget,r=c.indexOf(t),a=u[r].value;a!==o&&(d(t),i(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const r=c.indexOf(e.currentTarget)+1;t=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(e.currentTarget)-1;t=c[r]??c[c.length-1];break}}t?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":r},t)},u.map((e=>{let{value:t,label:r,attributes:s}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},s,{className:(0,l.Z)("tabs__item",y.tabItem,s?.className,{"tabs__item--active":o===t})}),r??t)})))}function w(e){let{lazy:t,children:r,selectedValue:a}=e;const l=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function h(e){const t=_(e);return n.createElement("div",{className:(0,l.Z)("tabs-container",y.tabList)},n.createElement(f,(0,a.Z)({},e,t)),n.createElement(w,(0,a.Z)({},e,t)))}function v(e){const t=(0,E.Z)();return n.createElement(h,(0,a.Z)({key:String(t)},e))}},52892:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>b,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var a=r(87462),n=(r(67294),r(3905)),l=r(74866),s=r(85162);const o={id:"aws_codebuild",title:"aws_codebuild",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},i=void 0,u={unversionedId:"modules/aws/aws_codebuild",id:"version-0.1.9/modules/aws/aws_codebuild",title:"aws_codebuild",description:"Tables",source:"@site/versioned_docs/version-0.1.9/modules/aws/aws_codebuild.md",sourceDirName:"modules/aws",slug:"/modules/aws/aws_codebuild",permalink:"/docs/modules/aws/aws_codebuild",draft:!1,editUrl:null,tags:[],version:"0.1.9",frontMatter:{id:"aws_codebuild",title:"aws_codebuild",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"aws_cloudwatch",permalink:"/docs/modules/aws/aws_cloudwatch"},next:{title:"aws_codedeploy",permalink:"/docs/modules/aws/aws_codedeploy"}},c={},d=[{value:"Tables",id:"tables",level:3},{value:"Functions",id:"functions",level:3},{value:"Enums",id:"enums",level:3}],p={toc:d},m="wrapper";function b(e){let{components:t,...r}=e;return(0,n.kt)(m,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)(l.Z,{queryString:"view",mdxType:"Tabs"},(0,n.kt)(s.Z,{value:"components",label:"Components",default:!0,mdxType:"TabItem"},(0,n.kt)("h3",{id:"tables"},"Tables"),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/tables/aws_codebuild_entity_build.CodebuildBuildList"},"codebuild_build_list")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/tables/aws_codebuild_entity_project.CodebuildProject"},"codebuild_project")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/tables/aws_codebuild_entity_source_credentials.SourceCredentialsList"},"source_credentials_list")),(0,n.kt)("h3",{id:"functions"},"Functions"),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/tables/aws_codebuild_rpcs_import_source_credential.ImportSourceCredentialRpc"},"import_source_credential")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/tables/aws_codebuild_rpcs_start_build.StartBuildRPC"},"start_build")),(0,n.kt)("h3",{id:"enums"},"Enums"),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_codebuild_entity_build.BuildStatus"},"build_status")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_codebuild_entity_project.ComputeType"},"compute_type")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_codebuild_entity_project.EnvironmentType"},"environment_type")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_codebuild_entity_project.EnvironmentVariableType"},"environment_variable_type")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_codebuild_entity_project.SourceType"},"source_type")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_codebuild_entity_source_credentials.AuthType"},"auth_type")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_codebuild_rpcs_import_source_credential.ValidAuthTypes"},"valid_auth_types")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_codebuild_rpcs_import_source_credential.ValidServerTypes"},"valid_server_types"))),(0,n.kt)(s.Z,{value:"code-examples",label:"Code examples",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("details",{open:"true"},(0,n.kt)("summary",{mdxType:"summary"},"Manage Codebuild"),(0,n.kt)("codeblock",{language:"sql"},"--- installs the codebuild module\nSELECT * FROM iasql_install('<modules>');\n--- check generate_put_ecr_image_build_spec with no build args\nSELECT generate_put_ecr_image_build_spec('us-west-2', 'latest', 'my-repository', 'myrepouri.com', 'examples/ecs-fargate/prisma/app');\n--- check generate_put_ecr_image_build_spec\nSELECT generate_put_ecr_image_build_spec('us-west-2', 'latest', 'my-repository', 'myrepouri.com', 'examples/ecs-fargate/prisma/app', array['IASQL_ENV=local', 'SECRET=secret']);\n--- imports a new source credential\nSELECT * FROM import_source_credential('<region>', '<GH_PAT>', 'GITHUB', 'PERSONAL_ACCESS_TOKEN');\n--- check new source_credentials_list\nSELECT *\nFROM source_credentials_list\nWHERE source_type = 'GITHUB';\n--- delete source_credentials_list\nDELETE FROM source_credentials_list\nWHERE source_type = 'GITHUB';\n--- adds a new repository\nINSERT INTO repository (repository_name)\nVALUES ('<dbAlias>');\n--- adds a new role\nINSERT INTO iam_role (role_name, assume_role_policy_document, attached_policies_arns)\nVALUES ('<dbAlias>', '<assumeServicePolicy>', array ['arn:aws:iam::aws:policy/CloudWatchLogsFullAccess',\n'arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess',\n'arn:aws:iam::aws:policy/AWSCodeStarFullAccess',\n'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess']);\n--- adds a new codebuild_project with codepipeline type\nINSERT INTO codebuild_project (project_name, source_type, service_role_name)\nVALUES ('<dbAlias>-codepipeline', 'CODEPIPELINE', '<dbAlias>');\n--- check new project exists\nSELECT *\nFROM codebuild_project\nWHERE project_name='<dbAlias>-codepipeline';\n--- deletes codebuild codepipeline project\nDELETE FROM codebuild_project WHERE project_name='<dbAlias>-codepipeline';\n--- start and wait for build\nSELECT * FROM start_build('<dbAlias>', '<region>');\n--- check build exists in list\nSELECT * FROM codebuild_build_list\nWHERE project_name = '<dbAlias>';\n--- creates a project that pushes to ecr\nINSERT INTO codebuild_project (project_name, build_spec, source_type, privileged_mode, service_role_name)\nVALUES ('<dbAlias>-push-ecr', 'version: 0.2\n\nphases:\npre_build:\ncommands:\n- echo Logging in to Amazon ECR...\n- aws ecr get-login-password --region<region>| docker login --username AWS --password-stdin ' || (SELECT repository_uri FROM repository WHERE repository_name = '<dbAlias>' ) || '\nbuild:\ncommands:\n- echo Building the Docker image...\n- docker pull public.ecr.aws/docker/library/ubuntu:latest\n- docker tag public.ecr.aws/docker/library/ubuntu:latest ' || (SELECT repository_uri FROM repository WHERE repository_name = '<dbAlias>' ) || ':latest\npost_build:\ncommands:\n- echo Pushing the Docker image...\n- docker push ' || (SELECT repository_uri FROM repository WHERE repository_name = '<dbAlias>' ) || ':latest', 'NO_SOURCE', true, '<dbAlias>');\n--- start ecr build and wait\nSELECT * FROM start_build('<dbAlias>-push-ecr', '<region>');\n--- check successful build exists in list\nSELECT * FROM codebuild_build_list\nWHERE project_name = '<dbAlias>-push-ecr' AND build_status='SUCCEEDED';\n--- checks the image is pushed to ecr\nSELECT *\nFROM repository_image\nWHERE private_repository_id = (SELECT id FROM repository WHERE repository_name = '<dbAlias>');\n--- deletes the image\nDELETE\nFROM repository_image\nWHERE private_repository_id = (SELECT id FROM repository WHERE repository_name = '<dbAlias>');\n--- delete build\nDELETE FROM codebuild_build_list\nWHERE project_name in ('<dbAlias>', '<dbAlias>-push-ecr');\n--- delete project\nDELETE FROM codebuild_project\nWHERE project_name in ('<dbAlias>', '<dbAlias>-push-ecr');\n--- delete repository\nDELETE FROM repository\nWHERE repository_name = '<dbAlias>';\n--- delete role\nDELETE FROM iam_role\nWHERE role_name = '<dbAlias>';\n"))))))}b.isMDXComponent=!0}}]);