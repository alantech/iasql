"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[81185],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var r=a.createContext({}),c=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(r.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),b=o,m=p["".concat(r,".").concat(b)]||p[b]||d[b]||i;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=b;var s={};for(var r in t)hasOwnProperty.call(t,r)&&(s[r]=t[r]);s.originalType=e,s[p]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},96014:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const i={slug:"deploy-static-website",title:"Deploy a Static Website on AWS using SQL",date:new Date("2023-03-03T00:00:00.000Z"),authors:["mtp1376","depombo"],tags:["tutorial"]},l=void 0,s={permalink:"/blog/deploy-static-website",editUrl:"https://github.com/alantech/iasql/tree/main/site/blog/tutorials/deploy-static-website.mdx",source:"@site/blog/tutorials/deploy-static-website.mdx",title:"Deploy a Static Website on AWS using SQL",description:"Did you know you can deploy a static website using a SQL REPL? In this post, we'll show you how to use IaSQL to deploy a static website from your GitHub repository to AWS S3 + Cloudfront services using only SQL queries. IaSQL is an open-source software tool that creates a two-way connection between an unmodified PostgreSQL database and an AWS account so you can manage your infrastructure from a database.",date:"2023-03-03T00:00:00.000Z",formattedDate:"March 3, 2023",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:6.975,hasTruncateMarker:!0,authors:[{name:"Mohammad Teimori Pabandi",imageURL:"https://github.com/mtp1376.png",key:"mtp1376"},{name:"L. Fernando De Pombo",imageURL:"https://github.com/depombo.png",key:"depombo"}],frontMatter:{slug:"deploy-static-website",title:"Deploy a Static Website on AWS using SQL",date:"2023-03-03T00:00:00.000Z",authors:["mtp1376","depombo"],tags:["tutorial"]},prevItem:{title:"Securely connect to an Amazon RDS via PrivateLink using SQL",permalink:"/blog/rds-privatelink"},nextItem:{title:"IaSQL is in beta!",permalink:"/blog/beta"}},r={authorsImageUrls:[void 0,void 0]},c=[{value:"Create an S3 Bucket",id:"create-an-s3-bucket",level:2},{value:"Make The Bucket Public",id:"make-the-bucket-public",level:2},{value:"Use S3 Static Website Hosting",id:"use-s3-static-website-hosting",level:2},{value:"Build The Project And Sync To S3",id:"build-the-project-and-sync-to-s3",level:2},{value:"Create a CloudFront Distribution",id:"create-a-cloudfront-distribution",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Did you know you can deploy a static website using a SQL REPL? In this post, we'll show you how to use IaSQL to deploy a static website from your GitHub repository to AWS S3 + Cloudfront services using only SQL queries. IaSQL is an ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/alantech/iasql"},"open-source")," software tool that creates a two-way connection between an unmodified PostgreSQL database and an AWS account so you can manage your infrastructure from a database."),(0,o.kt)("p",null,"We will create and configure an S3 bucket to serve our static website. To enable support for HTTPS, we'll also add a CloudFront distribution. We will also leverage CodeBuild to automatically build the files for our project and copy them to the S3 bucket created already."),(0,o.kt)("h2",{id:"create-an-s3-bucket"},"Create an S3 Bucket"),(0,o.kt)("p",null,"To be able to work with S3, we should first install the corresponding IaSQL module."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Install S3 Module"',title:'"Install',S3:!0,'Module"':!0},"SELECT\n  iasql_install ('aws_s3');\n")),(0,o.kt)("p",null,"Installing a module gives us the ability to use tables and RPCs provided by it. ",(0,o.kt)("inlineCode",{parentName:"p"},"aws_s3")," module gives us the ability to manage an S3 bucket, S3 static website hosting, and other related stuff. So let's create an S3 bucket first."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Create an S3 Bucket"',title:'"Create',an:!0,S3:!0,'Bucket"':!0},'SELECT\n  iasql_begin ();\n\nINSERT INTO\n  bucket (NAME, policy_document, region)\nVALUES\n  (\n    \'<bucket-name>\',\n    \'{\n  "Version": "2012-10-17",\n  "Statement": [\n    {\n      "Sid": "PublicReadGetObject",\n      "Effect": "Allow",\n      "Principal": "*",\n      "Action": [\n        "s3:GetObject"\n      ],\n      "Resource": [\n        "arn:aws:s3:::<bucket-name>/*"\n      ]\n    }\n  ]\n}\',\n    \'us-east-1\'\n  );\n\nSELECT\n  iasql_commit ();\n')),(0,o.kt)("p",null,"The above query will create a new bucket in the ",(0,o.kt)("inlineCode",{parentName:"p"},"us-east-1")," region with the defined name ",(0,o.kt)("inlineCode",{parentName:"p"},"<bucket-name>")," and the given policy using IaSQL. The ",(0,o.kt)("inlineCode",{parentName:"p"},"iasql_begin")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"iasql_commit")," functions are RPCs that will start and finish an IaSQL transaction. Learn more about IaSQL transactions in this part of our ",(0,o.kt)("a",{parentName:"p",href:"/docs/transaction/"},"documentation"),"."),(0,o.kt)("p",null,"Now that we have a bucket, we can upload a file to it and see if we're able to view it using our web browser. Let's use IaSQL to upload a file to our newly created bucket:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Upload a File to S3 Bucket"',title:'"Upload',a:!0,File:!0,to:!0,S3:!0,'Bucket"':!0},"SELECT\n  *\nFROM\n  s3_upload_object ('<bucket-name>', 'hello.txt', 'Hello IaSQL!', 'text/plain');\n")),(0,o.kt)("p",null,"This is going to upload a file named ",(0,o.kt)("inlineCode",{parentName:"p"},"hello.txt")," in our bucket whose content is ",(0,o.kt)("inlineCode",{parentName:"p"},"Hello IaSQL!"),"."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can read the code for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/alantech/iasql/blob/c70f068c7520baf00cea9ddd3a76b8c6dbd2b23b/src/modules/aws_s3/rpcs/s3_upload_object.ts#L27-L33"},(0,o.kt)("inlineCode",{parentName:"a"},"s3_upload_object")," RPC")," as well as all other IaSQL modules and RPCs in our GitHub ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/alantech/iasql/"},"repository")," to see how they work.")),(0,o.kt)("p",null,"Let's see if we can access our file using the S3 bucket URL. It should be as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"https://<bucket-name>.s3.amazonaws.com/hello.txt\n")),(0,o.kt)("p",null,"But we're unable to access the file directly because S3 blocks public access by default."),(0,o.kt)("img",{src:"/deploy-static-website/s3-access-denied.png"}),(0,o.kt)("h2",{id:"make-the-bucket-public"},"Make The Bucket Public"),(0,o.kt)("p",null,"We need to enable public access to our bucket files to be able to directly access the files. We can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"public_access_block")," table provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"aws_s3")," module to allow for public requests to reach our objects."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you want to know which resources (via tables) an IaSQL module handles, you can visit our documentation page. It also provides a list and explanation of all the RPCs that are provided by a module. In our case, we can visit ",(0,o.kt)("a",{parentName:"p",href:"https://iasql.com/docs/modules/aws/aws_s3/"},"this link")," to get a list of tables and RPCs available for ",(0,o.kt)("inlineCode",{parentName:"p"},"aws_s3")," module.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Enable Public Access to The Bucket"',title:'"Enable',Public:!0,Access:!0,to:!0,The:!0,'Bucket"':!0},"SELECT\n  iasql_begin ();\n\nINSERT INTO\n  public_access_block (bucket_name, block_public_acls, ignore_public_acls, block_public_policy, restrict_public_buckets)\nVALUES\n  ('<bucket-name>', FALSE, FALSE, FALSE, FALSE) ON CONFLICT (bucket_name)\nDO\nUPDATE\nSET\n  block_public_acls = excluded.block_public_acls,\n  ignore_public_acls = excluded.ignore_public_acls,\n  block_public_policy = excluded.block_public_policy,\n  restrict_public_buckets = excluded.restrict_public_buckets;\n\nSELECT\n  iasql_commit ();\n")),(0,o.kt)("p",null,"There's a 1-1 relationship between the bucket and bucket public access block, therefore we're using Postgres ",(0,o.kt)("a",{parentName:"p",href:"https://www.postgresql.org/docs/current/sql-insert.html#SQL-ON-CONFLICT"},(0,o.kt)("inlineCode",{parentName:"a"},"ON CONFLICT"))," syntax so that when there's a record already, we can replace it without hassle."),(0,o.kt)("p",null,"Now we should be able to directly access our file through the web browser."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"https://<bucket-name>.s3.amazonaws.com/hello.txt\n")),(0,o.kt)("img",{src:"/deploy-static-website/hello-iasql.png"}),(0,o.kt)("h2",{id:"use-s3-static-website-hosting"},"Use S3 Static Website Hosting"),(0,o.kt)("p",null,"But simply serving the files doesn't mean we can host a static website. We need to enable ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html"},"static website hosting")," for our bucket to be able to deploy a React codebase. So let's enable it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Enable S3 Static Website Hosting"',title:'"Enable',S3:!0,Static:!0,Website:!0,'Hosting"':!0},"SELECT\n  iasql_begin ();\n\nINSERT INTO\n  bucket_website (bucket_name, index_document)\nVALUES\n  ('<bucket-name>', 'index.html');\n\nSELECT\n  iasql_commit ();\n")),(0,o.kt)("p",null,"We'll use this functionality to route all the requests to ",(0,o.kt)("inlineCode",{parentName:"p"},"index.html")," file. This way we can deploy a sample React application and serve it through S3. To get the link for our S3 bucket's static website, we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"get_bucket_website_endpoint")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  *\nFROM\n  get_bucket_website_endpoint ('<bucket-name>');\n")),(0,o.kt)("h2",{id:"build-the-project-and-sync-to-s3"},"Build The Project And Sync To S3"),(0,o.kt)("p",null,"Now that everything is set, we just need to build our React app and deploy it to S3. We have already pushed a sample app to this repository:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"https://github.com/iasql/sample-react-app\n")),(0,o.kt)("p",null,"But you can use whatever codebase you'd like by changing the URLs so that they point to the Github repository hosting your React app."),(0,o.kt)("p",null,"Now it's time to create a CodeBuild project. CodeBuild is an AWS CI/CD system that is free of cost. The CodeBuild project will do the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Pull the codebase from the GitHub repository"),(0,o.kt)("li",{parentName:"ul"},"Build the app"),(0,o.kt)("li",{parentName:"ul"},"Copy the resulting files (",(0,o.kt)("inlineCode",{parentName:"li"},"build/*"),") to the S3 bucket")),(0,o.kt)("p",null,"We can do this with the following SQL query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Create a CodeBuild Project to Build and Deploy The Website"',title:'"Create',a:!0,CodeBuild:!0,Project:!0,to:!0,Build:!0,and:!0,Deploy:!0,The:!0,'Website"':!0},"SELECT\n  iasql_begin ();\n\n-- create the needed role for codebuild\nINSERT INTO\n  iam_role (role_name, assume_role_policy_document, attached_policies_arns)\nVALUES\n  (\n    'deploy-static-website-role',\n    '{\n    \"Statement\": [\n      {\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n          \"Service\": \"codebuild.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n      }\n    ],\n    \"Version\": \"2012-10-17\"\n  }',\n    ARRAY[\n      'arn:aws:iam::aws:policy/AWSCodeBuildAdminAccess',\n      'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess',\n      'arn:aws:iam::aws:policy/AmazonS3FullAccess'\n    ]\n  );\n\n-- create the codebuild project\nINSERT INTO\n  codebuild_project (project_name, build_spec, source_type, privileged_mode, service_role_name, region)\nVALUES\n  (\n    'deploy-static-website',\n    'version: 0.2\n\nphases:\n  pre_build:\n    commands:\n      - git clone https://github.com/iasql/sample-react-app && cd sample-react-app\n  build:\n    commands:\n      - echo Installing dependencies\n      - npm install\n      - echo Building the app\n      - npm run build\n  post_build:\n    commands:\n      - echo Copying the files to the S3 bucket\n      - aws s3 sync build/ s3://<bucket-name>',\n    'NO_SOURCE',\n    FALSE,\n    'deploy-static-website-role',\n    'us-east-1'\n  );\n\nSELECT\n  iasql_commit ();\n")),(0,o.kt)("p",null,"The above SQL command first creates a role that is needed for CodeBuild to operate. Then it'll create the actual CodeBuild project that clones the repo, builds it and finally syncs the resulting files to our S3 bucket. We need to trigger the CodeBuild project to run and then our files will be uploaded to our bucket."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Trigger The CodeBuild Project"',title:'"Trigger',The:!0,CodeBuild:!0,'Project"':!0},"SELECT\n  *\nFROM\n  start_build ('deploy-static-website', 'us-east-1');\n")),(0,o.kt)("p",null,"This will trigger the CodeBuild project to start. After a while, we should be able to see the files appearing in our S3 bucket. We can access our React app using the endpoint for the S3 static website hosting. As we already mentioned, to get the endpoint we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"get_bucket_website_endpoint")," helper function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Get The Bucket Website Endpoint"',title:'"Get',The:!0,Bucket:!0,Website:!0,'Endpoint"':!0},"SELECT\n  get_bucket_website_endpoint ('<bucket-name>');\n")),(0,o.kt)("p",null,"By visiting the link returned by the above function, you can see our sample app has been deployed. The problem is that S3 static website hosting does not support HTTPS, and therefore we need to use a CloudFront distribution in order to have HTTPS connection."),(0,o.kt)("h2",{id:"create-a-cloudfront-distribution"},"Create a CloudFront Distribution"),(0,o.kt)("p",null,"Serving files in a bucket to the public using pure S3 isn't a good idea. In our case because the S3 static website hosting does not provide an HTTPS endpoint, but in most cases because the ",(0,o.kt)("a",{parentName:"p",href:"https://aws.amazon.com/s3/pricing/"},"data transfer rates for S3")," aren't cheap and can grow out of control. Also, the speed at which the users can access the bucket objects will increase if you use a CDN because they'll be delivered to the users from the nearest edge server."),(0,o.kt)("p",null,"With the above in mind, let's create a CloudFront distribution for our S3 bucket. But first, we need to install the ",(0,o.kt)("inlineCode",{parentName:"p"},"aws_cloudfront")," module to be able to leverage its abilities."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n  iasql_install ('aws_cloudfront');\n")),(0,o.kt)("p",null,"Then create the distribution:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Create a Distribution For Bucket Website"',title:'"Create',a:!0,Distribution:!0,For:!0,Bucket:!0,'Website"':!0},'SELECT\n  iasql_begin ();\n\nINSERT INTO\n  distribution (caller_reference, origins, default_cache_behavior)\nVALUES\n  (\n    \'my-website\',\n    (\n      \'[\n  {\n    "DomainName": "\' || (\n        SELECT\n          get_bucket_website_endpoint (\'<bucket-name>\')\n      ) || \'",\n    "Id": "my-website-origin",\n    "CustomOriginConfig": {\n      "HTTPPort": 80,\n      "HTTPSPort": 443,\n      "OriginProtocolPolicy": "http-only"\n    }\n  }\n]\'\n    )::json,\n    \'{\n  "TargetOriginId": "my-website-origin",\n  "ViewerProtocolPolicy": "allow-all",\n  "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6"\n}\'\n  );\n\nSELECT\n  iasql_commit ();\n')),(0,o.kt)("p",null,"We can access our website through the CloudFront distribution domain name. To get it, we can simply run the following query:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="Get the Distribution Domain Name"',title:'"Get',the:!0,Distribution:!0,Domain:!0,'Name"':!0},"SELECT\n  domain_name\nFROM\n  distribution\nWHERE\n  caller_reference = 'my-website';\n")),(0,o.kt)("p",null,"It supports HTTPS, it's fast, it's cheaper than directly serving on S3, and it can be easily connected to a Route53 domain."))}d.isMDXComponent=!0}}]);