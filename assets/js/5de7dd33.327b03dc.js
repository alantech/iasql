"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[26989],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>b});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),i=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=i(r),m=a,b=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return r?n.createElement(b,o(o({ref:t},c),{},{components:r})):n.createElement(b,o({ref:t},c))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u[p]="string"==typeof e?e:a,o[1]=u;for(var i=2;i<s;i++)o[i]=r[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},85162:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(67294),a=r(86010);const s={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:r,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(s.tabItem,o),hidden:r},t)}},74866:(e,t,r)=>{r.d(t,{Z:()=>T});var n=r(87462),a=r(67294),s=r(86010),o=r(12466),u=r(16550),l=r(91980),i=r(67392),c=r(50012);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}function d(e){const{values:t,children:r}=e;return(0,a.useMemo)((()=>{const e=t??p(r);return function(e){const t=(0,i.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:r}=e;const n=(0,u.k6)(),s=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,l._X)(s),(0,a.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(n.location.search);t.set(s,e),n.replace({...n.location,search:t.toString()})}),[s,n])]}function E(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,s=d(e),[o,u]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:s}))),[l,i]=b({queryString:r,groupId:n}),[p,E]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,s]=(0,c.Nk)(r);return[n,(0,a.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:n}),_=(()=>{const e=l??p;return m({value:e,tabValues:s})?e:null})();(0,a.useLayoutEffect)((()=>{_&&u(_)}),[_]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);u(e),i(e),E(e)}),[i,E,s]),tabValues:s}}var _=r(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:r,selectedValue:u,selectValue:l,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const t=e.currentTarget,r=c.indexOf(t),n=i[r].value;n!==u&&(p(t),l(n))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=c.indexOf(e.currentTarget)+1;t=c[r]??c[0];break}case"ArrowLeft":{const r=c.indexOf(e.currentTarget)-1;t=c[r]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},t)},i.map((e=>{let{value:t,label:r,attributes:o}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:u===t?0:-1,"aria-selected":u===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},o,{className:(0,s.Z)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":u===t})}),r??t)})))}function h(e){let{lazy:t,children:r,selectedValue:n}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},s.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function y(e){const t=E(e);return a.createElement("div",{className:(0,s.Z)("tabs-container",f.tabList)},a.createElement(g,(0,n.Z)({},e,t)),a.createElement(h,(0,n.Z)({},e,t)))}function T(e){const t=(0,_.Z)();return a.createElement(y,(0,n.Z)({key:String(t)},e))}},14075:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>b,frontMatter:()=>u,metadata:()=>i,toc:()=>p});var n=r(87462),a=(r(67294),r(3905)),s=r(74866),o=r(85162);const u={id:"aws_rds",title:"aws_rds",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},l=void 0,i={unversionedId:"modules/aws/aws_rds",id:"version-0.1.9/modules/aws/aws_rds",title:"aws_rds",description:"Tables",source:"@site/versioned_docs/version-0.1.9/modules/aws/aws_rds.md",sourceDirName:"modules/aws",slug:"/modules/aws/aws_rds",permalink:"/docs/modules/aws/aws_rds",draft:!1,editUrl:null,tags:[],version:"0.1.9",frontMatter:{id:"aws_rds",title:"aws_rds",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"aws_opensearch",permalink:"/docs/modules/aws/aws_opensearch"},next:{title:"aws_route53",permalink:"/docs/modules/aws/aws_route53"}},c={},p=[{value:"Tables",id:"tables",level:3},{value:"Enums",id:"enums",level:3}],d={toc:p},m="wrapper";function b(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(s.Z,{queryString:"view",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"components",label:"Components",default:!0,mdxType:"TabItem"},(0,a.kt)("h3",{id:"tables"},"Tables"),(0,a.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,a.kt)("a",{parentName:"p",href:"../../aws/tables/aws_rds_entity_db_cluster.DBCluster"},"db_cluster")),(0,a.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,a.kt)("a",{parentName:"p",href:"../../aws/tables/aws_rds_entity_db_subnet_group.DBSubnetGroup"},"db_subnet_group")),(0,a.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,a.kt)("a",{parentName:"p",href:"../../aws/tables/aws_rds_entity_parameter_group.ParameterGroup"},"parameter_group")),(0,a.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,a.kt)("a",{parentName:"p",href:"../../aws/tables/aws_rds_entity_rds.RDS"},"RDS")),(0,a.kt)("h3",{id:"enums"},"Enums"),(0,a.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,a.kt)("a",{parentName:"p",href:"../../aws/enums/aws_rds_entity_db_cluster.dbClusterEngineEnum"},"db_cluster_engine")),(0,a.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,a.kt)("a",{parentName:"p",href:"../../aws/enums/aws_rds_entity_parameter_group.ParameterGroupFamily"},"parameter_group_family"))),(0,a.kt)(o.Z,{value:"code-examples",label:"Code examples",mdxType:"TabItem"},(0,a.kt)("p",null,(0,a.kt)("details",{open:"true"},(0,a.kt)("summary",{mdxType:"summary"},"Manage RDS instances"),(0,a.kt)("codeblock",{language:"sql"},"--- installs the rds module\nSELECT * FROM iasql_install('<modules>');\n--- creates an RDS instance\nBEGIN;\nINSERT INTO rds (db_instance_identifier, allocated_storage, db_instance_class, master_username, master_user_password, availability_zone, engine, engine_version, backup_retention_period, tags)\nVALUES ('<prefix>test', 20, 'db.t3.micro', 'test', 'testpass2023', (SELECT name FROM availability_zone WHERE region = '<region>' LIMIT 1), 'postgres', '13.4', 0, '{\"name\":\"<prefix>-1\"}');\nINSERT INTO rds_security_groups (rds_id, security_group_id) SELECT\n(SELECT id FROM rds WHERE db_instance_identifier='<prefix>test'),\n(SELECT id FROM security_group WHERE group_name='default' AND region = '<region>');\nCOMMIT;\n--- check adds a new db instance\nSELECT *\nFROM rds\nWHERE tags ->> 'name' = '<prefix>-1';\n--- check security group relationship\nSELECT *\nFROM rds_security_groups\nINNER JOIN rds ON rds.id = rds_security_groups.rds_id\nWHERE db_instance_identifier = '<prefix>test';\n--- changes the postgres version\nUPDATE rds SET engine_version = '13.5' WHERE tags ->> 'name' = '<prefix>-1';\n--- updates RDS tags\nUPDATE rds SET tags = '{\"name\":\"<prefix>-2\"}' WHERE tags ->> 'name' = '<prefix>-1';\n--- creates an RDS parameter group\nINSERT INTO parameter_group (name, family, description)\nVALUES ('<parameterGroupName>', '<engineFamily>', '<parameterGroupName>desc');\n--- check parameter group insertion\nSELECT *\nFROM parameter_group\nWHERE name = '<parameterGroupName>';\n--- changes all boolean parameters for the new parameter group to be true\nWITH parameters AS (\nSELECT name, params\nFROM parameter_group,\njsonb_array_elements(parameters) params\nWHERE name = '<parameterGroupName>' AND params ->> 'DataType' = 'boolean' AND params->> 'IsModifiable' = 'true'\n), updated_parameters AS (\nselect name, jsonb_set(params, '{ParameterValue}', '1', true) updated_params\nfrom parameters\n)\nUPDATE parameter_group\nSET parameters = (\nSELECT jsonb_agg(updated_params)\nFROM updated_parameters\nWHERE updated_parameters.name = parameter_group.name\n);\n--- check all modifiable boolean parameters are true\nSELECT params ->> 'ParameterValue' as value\nFROM parameter_group, jsonb_array_elements(parameters) as params\nWHERE name = '<parameterGroupName>' AND params ->> 'DataType' = 'boolean' AND params ->> 'IsModifiable' = 'true';\n--- removes the RDS instance\nDELETE FROM rds\nWHERE tags ->> 'name' = '<prefix>-2';\n--- check rds delete count\nSELECT *\nFROM rds\nWHERE tags ->> 'name' = '<prefix>-2';\n--- removes the parameter group and it parameters\nDELETE FROM parameter_group\nWHERE name = '<parameterGroupName>';\n--- check parameter group count after delete\nSELECT *\nFROM parameter_group\nWHERE name = '<parameterGroupName>';\n")),(0,a.kt)("details",{open:"true"},(0,a.kt)("summary",{mdxType:"summary"},"Manage Multi-AZ clusters"),(0,a.kt)("codeblock",{language:"sql"},"--- installs the rds module\nSELECT * FROM iasql_install('<modules>');\n--- creates an RDS subnet group\nINSERT INTO db_subnet_group (name, description, subnets)\nVALUES ('<prefix>cluster-test', 'test subnet group', (SELECT ARRAY(\nSELECT DISTINCT ON (subnet.availability_zone) subnet_id from subnet inner join vpc on vpc.id = subnet.vpc_id where is_default = true and vpc.region = '<region>' LIMIT 3\n)));\n--- check subnet group insertion\nSELECT *\nFROM db_subnet_group\nWHERE name = '<prefix>cluster-test';\n--- creates an RDS cluster\nINSERT INTO db_cluster (db_cluster_identifier, engine, engine_version, allocated_storage, iops, db_cluster_instance_class, master_username, master_user_password, subnet_group_id, tags, deletion_protection) VALUES\n('<prefix>cluster-test', 'mysql', '<engineVersion>', 100, 1000, 'db.m5d.xlarge', 'admin', 'admin123456', (select id FROM db_subnet_group WHERE name = '<prefix>cluster-test'), '{\"name\":\"<prefix>-1\"}', TRUE);\n--- check adds a new db cluster\nSELECT *\nFROM db_cluster\nWHERE tags->>'name' = '<prefix>-1';\n--- changes the backup retention period\nUPDATE db_cluster SET backup_retention_period=10 WHERE tags->>'name' = '<prefix>-1';\n--- check that retention period has been modified\nSELECT *\nFROM db_cluster\nWHERE tags->>'name' = '<prefix>-1' AND backup_retention_period=10;\n--- tries to update an instance belonging to a cluster\nUPDATE rds SET backup_retention_period=3 WHERE db_cluster_id = (SELECT id FROM db_cluster WHERE db_cluster_identifier='<prefix>cluster-test');\n--- check that backup retention period for instances has not been modified\nSELECT *\nFROM rds\nWHERE db_cluster_id = (SELECT id FROM db_cluster WHERE db_cluster_identifier = '<prefix>cluster-test') AND backup_retention_period=3;\n--- updates db_cluster tags and removes deletion protection\nUPDATE db_cluster SET tags = '{\"name\":\"<prefix>-2\"}', deletion_protection=FALSE WHERE tags ->> 'name' = '<prefix>-1';\n--- removes the RDS cluster\nDELETE FROM db_cluster\nWHERE tags->>'name' = '<prefix>-2';\n--- check RDS cluster delete count\nSELECT *\nFROM db_cluster\nWHERE tags->>'name' = '<prefix>-2';\n--- removes the db subnet group and its parameters\nDELETE FROM db_subnet_group\nWHERE name = '<prefix>cluster-test';\n--- check subnet group count after delete\nSELECT *\nFROM db_subnet_group\nWHERE name = '<prefix>cluster-test';\n"))))))}b.isMDXComponent=!0}}]);