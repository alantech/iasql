"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8060],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var a=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(r),d=o,y=c["".concat(l,".").concat(d)]||c[d]||m[d]||n;return r?a.createElement(y,s(s({ref:t},p),{},{components:r})):a.createElement(y,s({ref:t},p))}));function y(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,s=new Array(n);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,s[1]=i;for(var u=2;u<n;u++)s[u]=r[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},85162:(e,t,r)=>{r.d(t,{Z:()=>s});var a=r(67294),o=r(86010);const n={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:r,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(n.tabItem,s),hidden:r},t)}},74866:(e,t,r)=>{r.d(t,{Z:()=>w});var a=r(87462),o=r(67294),n=r(86010),s=r(12466),i=r(16550),l=r(91980),u=r(67392),p=r(50012);function c(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:a,default:o}}=e;return{value:t,label:r,attributes:a,default:o}}))}function m(e){const{values:t,children:r}=e;return(0,o.useMemo)((()=>{const e=t??c(r);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function d(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function y(e){let{queryString:t=!1,groupId:r}=e;const a=(0,i.k6)(),n=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,l._X)(n),(0,o.useCallback)((e=>{if(!n)return;const t=new URLSearchParams(a.location.search);t.set(n,e),a.replace({...a.location,search:t.toString()})}),[n,a])]}function E(e){const{defaultValue:t,queryString:r=!1,groupId:a}=e,n=m(e),[s,i]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=r.find((e=>e.default))??r[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:n}))),[l,u]=y({queryString:r,groupId:a}),[c,E]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,n]=(0,p.Nk)(r);return[a,(0,o.useCallback)((e=>{r&&n.set(e)}),[r,n])]}({groupId:a}),b=(()=>{const e=l??c;return d({value:e,tabValues:n})?e:null})();(0,o.useLayoutEffect)((()=>{b&&i(b)}),[b]);return{selectedValue:s,selectValue:(0,o.useCallback)((e=>{if(!d({value:e,tabValues:n}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),E(e)}),[u,E,n]),tabValues:n}}var b=r(72389);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:r,selectedValue:i,selectValue:l,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),m=e=>{const t=e.currentTarget,r=p.indexOf(t),a=u[r].value;a!==i&&(c(t),l(a))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const r=p.indexOf(e.currentTarget)+1;t=p[r]??p[0];break}case"ArrowLeft":{const r=p.indexOf(e.currentTarget)-1;t=p[r]??p[p.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.Z)("tabs",{"tabs--block":r},t)},u.map((e=>{let{value:t,label:r,attributes:s}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:m},s,{className:(0,n.Z)("tabs__item",_.tabItem,s?.className,{"tabs__item--active":i===t})}),r??t)})))}function h(e){let{lazy:t,children:r,selectedValue:a}=e;const n=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=n.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function g(e){const t=E(e);return o.createElement("div",{className:(0,n.Z)("tabs-container",_.tabList)},o.createElement(f,(0,a.Z)({},e,t)),o.createElement(h,(0,a.Z)({},e,t)))}function w(e){const t=(0,b.Z)();return o.createElement(g,(0,a.Z)({key:String(t)},e))}},39237:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>y,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var a=r(87462),o=(r(67294),r(3905)),n=r(74866),s=r(85162);const i={id:"aws_ecr",title:"aws_ecr",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},l=void 0,u={unversionedId:"modules/aws/aws_ecr",id:"version-0.1.9/modules/aws/aws_ecr",title:"aws_ecr",description:"Tables",source:"@site/versioned_docs/version-0.1.9/modules/aws/aws_ecr.md",sourceDirName:"modules/aws",slug:"/modules/aws/aws_ecr",permalink:"/docs/modules/aws/aws_ecr",draft:!1,editUrl:null,tags:[],version:"0.1.9",frontMatter:{id:"aws_ecr",title:"aws_ecr",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"aws_ec2_metadata",permalink:"/docs/modules/aws/aws_ec2_metadata"},next:{title:"aws_ecs_fargate",permalink:"/docs/modules/aws/aws_ecs_fargate"}},p={},c=[{value:"Tables",id:"tables",level:3},{value:"Functions",id:"functions",level:3},{value:"Enums",id:"enums",level:3}],m={toc:c},d="wrapper";function y(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,a.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(n.Z,{queryString:"view",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"components",label:"Components",default:!0,mdxType:"TabItem"},(0,o.kt)("h3",{id:"tables"},"Tables"),(0,o.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,o.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ecr_entity_public_repository.PublicRepository"},"public_repository")),(0,o.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,o.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ecr_entity_repository.Repository"},"repository")),(0,o.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,o.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ecr_entity_repository_image.RepositoryImage"},"repository_image")),(0,o.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,o.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ecr_entity_repository_policy.RepositoryPolicy"},"repository_policy")),(0,o.kt)("h3",{id:"functions"},"Functions"),(0,o.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,o.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ecr_rpcs_build.EcrBuildRpc"},"ecr_build")),(0,o.kt)("h3",{id:"enums"},"Enums"),(0,o.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,o.kt)("a",{parentName:"p",href:"../../aws/enums/aws_ecr_entity_repository.ImageTagMutability"},"image_tag_mutability"))),(0,o.kt)(s.Z,{value:"code-examples",label:"Code examples",mdxType:"TabItem"},(0,o.kt)("p",null,(0,o.kt)("details",{open:"true"},(0,o.kt)("summary",{mdxType:"summary"},"Managing private repositories"),(0,o.kt)("codeblock",{language:"sql"},"--- adds a new repository\nINSERT INTO repository (repository_name, scan_on_push, image_tag_mutability)\nVALUES ('<repositoryName>', false, 'MUTABLE');\n--- check that new images has been created under a private repo\nSELECT *\nFROM repository_image\nWHERE private_repository_id = (select id from repository where repository_name = '<repositoryName>');\n--- deletes image with a tag from a private repo\nDELETE FROM repository_image WHERE private_repository_id = (select id from repository where repository_name = '<repositoryName>') AND image_tag='<repositoryTag>';\n--- tries to update a repository field\nUPDATE repository SET scan_on_push = true WHERE repository_name = '<repositoryName>';\n--- check adds a new repository\nSELECT *\nFROM repository\nWHERE repository_name = '<repositoryName>';\n--- adds a new repository policy\nINSERT INTO repository_policy (repository_id, policy)\nVALUES ((select id from repository where repository_name = '<repositoryName>'), '<policyMock>');\n--- deletes the repository policy\nDELETE FROM repository_policy\nWHERE repository_id = (select id from repository where repository_name = '<repositoryName>');\n--- deletes the repository images\nDELETE FROM repository_image WHERE private_repository_id = (select id from repository where repository_name = '<repositoryName>');\n--- deletes the repository\nDELETE FROM repository\nWHERE repository_name = '<repositoryName>';\n")),(0,o.kt)("details",{open:"true"},(0,o.kt)("summary",{mdxType:"summary"},"Managing public repositories"),(0,o.kt)("codeblock",{language:"sql"},"--- adds a new public repository\nINSERT INTO public_repository (repository_name)\nVALUES ('<pubRepositoryName>');\n--- check that new images has been created under a public repo\nSELECT *\nFROM repository_image\nWHERE public_repository = '<pubRepositoryName>';\n--- deletes the repository images\nDELETE FROM repository_image WHERE public_repository= '<pubRepositoryName>';\n--- deletes the public repository\nDELETE FROM public_repository\nWHERE repository_name = '<pubRepositoryName>';\n")),(0,o.kt)("details",{open:"true"},(0,o.kt)("summary",{mdxType:"summary"},"Build images"),(0,o.kt)("codeblock",{language:"sql"},"--- installs the ecr module\nSELECT * FROM iasql_install('<modules>');\n--- creates a new ecr repository\nINSERT INTO repository (repository_name, scan_on_push, image_tag_mutability)\nVALUES ('<repositoryName>', false, 'MUTABLE');\n--- builds hello world image and pushes to the new ecr repo\nSELECT ecr_build(\n'https://github.com/iasql/docker-helloworld',\n(SELECT id FROM repository WHERE repository_name = '<repositoryName>')::varchar(255),\n'.',\n'main',\n'<GH_PAT>'\n);\n--- checks if the image is created in the database\nSELECT image_tag\nFROM repository_image\nWHERE private_repository_id = (SELECT id FROM repository WHERE repository_name = '<repositoryName>');\n--- deletes the image\nDELETE\nFROM repository_image\nWHERE private_repository_id = (SELECT id FROM repository WHERE repository_name = '<repositoryName>');\n--- builds hello world image and pushes to the new ecr repo without Github personal access token\nSELECT ecr_build(\n'https://github.com/iasql/docker-helloworld',\n(SELECT id FROM repository WHERE repository_name = '<repositoryName>')::varchar(255),\n'.',\n'main',\n''\n);\n--- checks if the image is created in the database\nSELECT image_tag\nFROM repository_image\nWHERE private_repository_id = (SELECT id FROM repository WHERE repository_name = '<repositoryName>');\n--- deletes the image\nDELETE\nFROM repository_image\nWHERE private_repository_id = (SELECT id FROM repository WHERE repository_name = '<repositoryName>');\n--- deletes the repository\nDELETE\nFROM repository\nWHERE repository_name = '<repositoryName>';\n"))))))}y.isMDXComponent=!0}}]);