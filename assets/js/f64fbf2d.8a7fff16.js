"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[48318],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>E});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var u=r.createContext({}),i=function(e){var a=r.useContext(u),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},c=function(e){var a=i(e.components);return r.createElement(u.Provider,{value:a},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},_=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,l=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=i(t),_=n,E=p["".concat(u,".").concat(_)]||p[_]||d[_]||l;return t?r.createElement(E,o(o({ref:a},c),{},{components:t})):r.createElement(E,o({ref:a},c))}));function E(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var l=t.length,o=new Array(l);o[0]=_;var s={};for(var u in a)hasOwnProperty.call(a,u)&&(s[u]=a[u]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var i=2;i<l;i++)o[i]=t[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}_.displayName="MDXCreateElement"},85162:(e,a,t)=>{t.d(a,{Z:()=>o});var r=t(67294),n=t(86010);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:a,hidden:t,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,n.Z)(l.tabItem,o),hidden:t},a)}},74866:(e,a,t)=>{t.d(a,{Z:()=>h});var r=t(87462),n=t(67294),l=t(86010),o=t(12466),s=t(16550),u=t(91980),i=t(67392),c=t(50012);function p(e){return function(e){return n.Children.map(e,(e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:a,label:t,attributes:r,default:n}}=e;return{value:a,label:t,attributes:r,default:n}}))}function d(e){const{values:a,children:t}=e;return(0,n.useMemo)((()=>{const e=a??p(t);return function(e){const a=(0,i.l)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,t])}function _(e){let{value:a,tabValues:t}=e;return t.some((e=>e.value===a))}function E(e){let{queryString:a=!1,groupId:t}=e;const r=(0,s.k6)(),l=function(e){let{queryString:a=!1,groupId:t}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:a,groupId:t});return[(0,u._X)(l),(0,n.useCallback)((e=>{if(!l)return;const a=new URLSearchParams(r.location.search);a.set(l,e),r.replace({...r.location,search:a.toString()})}),[l,r])]}function m(e){const{defaultValue:a,queryString:t=!1,groupId:r}=e,l=d(e),[o,s]=(0,n.useState)((()=>function(e){let{defaultValue:a,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!_({value:a,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:a,tabValues:l}))),[u,i]=E({queryString:t,groupId:r}),[p,m]=function(e){let{groupId:a}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,l]=(0,c.Nk)(t);return[r,(0,n.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:r}),b=(()=>{const e=u??p;return _({value:e,tabValues:l})?e:null})();(0,n.useLayoutEffect)((()=>{b&&s(b)}),[b]);return{selectedValue:o,selectValue:(0,n.useCallback)((e=>{if(!_({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),i(e),m(e)}),[i,m,l]),tabValues:l}}var b=t(72389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:a,block:t,selectedValue:s,selectValue:u,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const a=e.currentTarget,t=c.indexOf(a),r=i[t].value;r!==s&&(p(a),u(r))},_=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;a=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;a=c[t]??c[c.length-1];break}}a?.focus()};return n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},a)},i.map((e=>{let{value:a,label:t,attributes:o}=e;return n.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===a?0:-1,"aria-selected":s===a,key:a,ref:e=>c.push(e),onKeyDown:_,onClick:d},o,{className:(0,l.Z)("tabs__item",g.tabItem,o?.className,{"tabs__item--active":s===a})}),t??a)})))}function T(e){let{lazy:a,children:t,selectedValue:r}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(a){const e=l.find((e=>e.props.value===r));return e?(0,n.cloneElement)(e,{className:"margin-top--md"}):null}return n.createElement("div",{className:"margin-top--md"},l.map(((e,a)=>(0,n.cloneElement)(e,{key:a,hidden:e.props.value!==r}))))}function y(e){const a=m(e);return n.createElement("div",{className:(0,l.Z)("tabs-container",g.tabList)},n.createElement(f,(0,r.Z)({},e,a)),n.createElement(T,(0,r.Z)({},e,a)))}function h(e){const a=(0,b.Z)();return n.createElement(y,(0,r.Z)({key:String(a)},e))}},17749:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>u,default:()=>E,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=t(87462),n=(t(67294),t(3905)),l=t(74866),o=t(85162);const s={id:"aws_elb",title:"aws_elb",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},u=void 0,i={unversionedId:"modules/aws/aws_elb",id:"version-0.1.9/modules/aws/aws_elb",title:"aws_elb",description:"Tables",source:"@site/versioned_docs/version-0.1.9/modules/aws/aws_elb.md",sourceDirName:"modules/aws",slug:"/modules/aws/aws_elb",permalink:"/docs/modules/aws/aws_elb",draft:!1,editUrl:null,tags:[],version:"0.1.9",frontMatter:{id:"aws_elb",title:"aws_elb",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"aws_elasticache",permalink:"/docs/modules/aws/aws_elasticache"},next:{title:"aws_iam",permalink:"/docs/modules/aws/aws_iam"}},c={},p=[{value:"Tables",id:"tables",level:3},{value:"Enums",id:"enums",level:3}],d={toc:p},_="wrapper";function E(e){let{components:a,...t}=e;return(0,n.kt)(_,(0,r.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,n.kt)(l.Z,{queryString:"view",mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"components",label:"Components",default:!0,mdxType:"TabItem"},(0,n.kt)("h3",{id:"tables"},"Tables"),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/tables/aws_elb_entity_listener.Listener"},"listener")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/tables/aws_elb_entity_load_balancer.LoadBalancer"},"load_balancer")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/tables/aws_elb_entity_target_group.TargetGroup"},"target_group")),(0,n.kt)("h3",{id:"enums"},"Enums"),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_elb_entity_listener.ActionTypeEnum"},"action_type")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_elb_entity_load_balancer.IpAddressType"},"ip_address_type")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_elb_entity_load_balancer.LoadBalancerSchemeEnum"},"load_balancer_scheme")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_elb_entity_load_balancer.LoadBalancerStateEnum"},"load_balancer_state")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_elb_entity_load_balancer.LoadBalancerTypeEnum"},"load_balancer_type")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_elb_entity_target_group.ProtocolEnum"},"protocol")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_elb_entity_target_group.ProtocolVersionEnum"},"protocol_version")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_elb_entity_target_group.TargetGroupIpAddressTypeEnum"},"target_group_ip_address_type")),(0,n.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,n.kt)("a",{parentName:"p",href:"../../aws/enums/aws_elb_entity_target_group.TargetTypeEnum"},"target_type"))),(0,n.kt)(o.Z,{value:"code-examples",label:"Code examples",mdxType:"TabItem"},(0,n.kt)("p",null,(0,n.kt)("details",{open:"true"},(0,n.kt)("summary",{mdxType:"summary"},"Manage ELB"),(0,n.kt)("codeblock",{language:"sql"},"--- installs the elb module\nSELECT * FROM iasql_install('<modules>');\n--- adds a new targetGroup\nINSERT INTO target_group (target_group_name, target_type, protocol, port, vpc, health_check_path)\nVALUES ('<tgName>', '<tgType>', '<protocol>',<port>, null, '/health');\n--- check target_group insertion\nSELECT *\nFROM target_group\nWHERE target_group_name = '<tgName>';\n--- tries to update a target group field\nUPDATE target_group\nSET health_check_path = '/fake-health'\nWHERE target_group_name = '<tgName>';\n--- tries to update a target group field (replace)\nUPDATE target_group\nSET port = 5677\nWHERE target_group_name = '<tgName>';\n--- adds new security groups\nINSERT INTO security_group (description, group_name)\nVALUES ('Security Group Test 1', '<sg1>');\nINSERT INTO security_group (description, group_name)\nVALUES ('Security Group Test 2', '<sg2>');\n--- adds a new load balancer\nBEGIN;\nINSERT INTO load_balancer (load_balancer_name, scheme, vpc, load_balancer_type, ip_address_type)\nVALUES ('<lbName>', '<lbScheme>', null, '<lbType>', '<lbIPAddressType>');\n\nINSERT INTO load_balancer_security_groups(load_balancer_id, security_group_id)\nSELECT (SELECT id FROM load_balancer WHERE load_balancer_name = '<lbName>'),\n(SELECT id FROM security_group WHERE group_name = '<sg1>');\nCOMMIT;\n--- tries to update a load balancer attribute (update)\nUPDATE load_balancer SET attributes='<loadBalancerAttributes>' WHERE load_balancer_name='<lbName>';\n--- tries to update a load balancer security group (replace)\nUPDATE load_balancer_security_groups\nSET security_group_id = (SELECT id FROM security_group WHERE group_name = '<sg2>')\nWHERE load_balancer_id = (SELECT id FROM load_balancer WHERE load_balancer_name = '<lbName>');\n--- adds a new listener\nINSERT INTO listener (load_balancer_id, port, protocol, target_group_id)\nVALUES ((SELECT id FROM load_balancer WHERE load_balancer_name = '<lbName>'),<port>,\n'<protocol>',\n(SELECT id FROM target_group WHERE target_group_name = '<tgName>'));\n--- tries to update a listener field\nUPDATE listener\nSET port =<lbName>WHERE load_balancer_id = (SELECT id FROM load_balancer WHERE load_balancer_name = '');\n--- adds a new certificate to import\nSELECT * FROM certificate_import('<cert>', '<key>', '<region>', '{}');\n--- adds a new HTTPS listener\nINSERT INTO listener (load_balancer_id, port, protocol, target_group_id, certificate_id)\nVALUES ((SELECT id FROM load_balancer WHERE load_balancer_name = '<lbName>'),<portHTTPS>,\n'<protocolHTTPS>',\n(SELECT id FROM target_group WHERE target_group_name = '<tgName>'),\n(SELECT id FROM certificate WHERE domain_name = '<domainName>'));\n--- check https listener insertion\nSELECT *\nFROM listener\nWHERE load_balancer_id = (SELECT id FROM load_balancer WHERE load_balancer_name = '<lbName>');\n--- deletes the listener\nDELETE\nFROM listener\nWHERE load_balancer_id = (SELECT id FROM load_balancer WHERE load_balancer_name = '<lbName>');\n--- deletes the load balancer\nDELETE\nFROM load_balancer\nWHERE load_balancer_name = '<lbName>';\n--- deletes the security groups\nBEGIN;\nDELETE\nFROM security_group_rule\nWHERE security_group_id IN (\nSELECT id\nFROM security_group\nWHERE group_name IN ('<sg1>', '<sg2>')\n);\n\nDELETE\nFROM security_group\nWHERE group_name IN ('<sg1>', '<sg2>');\nCOMMIT;\n--- deletes the target group\nDELETE\nFROM target_group\nWHERE target_group_name = '<tgName>';\n--- deletes the certificate\nDELETE\nFROM certificate\nWHERE domain_name = '<domainName>';\n--- creates a target group in non-default region\nINSERT INTO target_group (target_group_name, target_type, protocol, port, vpc, health_check_path, region)\nVALUES ('<tgName>', '<tgType>', '<protocol>',<port>, null, '/health', 'us-east-1');\n--- verifies the target group is created\nSELECT target_group_arn\nFROM target_group\nWHERE target_group_name = '<tgName>';\n--- creates a security group in non-default region\nINSERT INTO security_group (description, group_name, region)\nVALUES ('Security Group Multi-region Test 1', '<sg1>', 'us-east-1');\n--- creates a load balancer in non-default region\nBEGIN;\nINSERT INTO load_balancer (load_balancer_name, scheme, vpc, load_balancer_type, ip_address_type, region)\nVALUES ('<lbName>', '<lbScheme>', null, '<lbType>', '<lbIPAddressType>', 'us-east-1');\n\nINSERT INTO load_balancer_security_groups(load_balancer_id, security_group_id)\nSELECT (SELECT id FROM load_balancer WHERE load_balancer_name = '<lbName>'),\n(SELECT id FROM security_group WHERE group_name = '<sg1>');\nCOMMIT;\n--- verifies that load balancer in non-default region is created\nSELECT load_balancer_arn\nFROM load_balancer\nWHERE load_balancer_name = '<lbName>';\n--- adds a listener to the load balancer in non-default region\nINSERT INTO listener (load_balancer_id, port, protocol, target_group_id)\nVALUES ((SELECT id FROM load_balancer WHERE load_balancer_name = '<lbName>'),<port>,\n'<protocol>',\n(SELECT id FROM target_group WHERE target_group_name = '<tgName>'));\n--- verifies the listener in non-default region is created\nSELECT listener_arn\nFROM listener;\n--- deletes multi-region resources\nBEGIN;\nDELETE\nFROM listener\nWHERE target_group_id = (SELECT id FROM target_group WHERE target_group_name = '<tgName>');\n\nDELETE\nFROM target_group\nWHERE target_group_name = '<tgName>';\n\nDELETE\nFROM security_group\nWHERE group_name = '<sg1>';\n\nDELETE\nFROM load_balancer\nWHERE load_balancer_name = '<lbName>';\nCOMMIT;\n"))))))}E.isMDXComponent=!0}}]);