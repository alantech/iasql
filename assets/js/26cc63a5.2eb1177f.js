"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[26801],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),u=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},E=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=u(t),E=r,d=p["".concat(c,".").concat(E)]||p[E]||m[E]||s;return t?a.createElement(d,i(i({ref:n},l),{},{components:t})):a.createElement(d,i({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=E;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<s;u++)i[u]=t[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}E.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>i});var a=t(67294),r=t(86010);const s={tabItem:"tabItem_Ymn6"};function i(e){let{children:n,hidden:t,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,i),hidden:t},n)}},74866:(e,n,t)=>{t.d(n,{Z:()=>R});var a=t(87462),r=t(67294),s=t(86010),i=t(12466),o=t(16550),c=t(91980),u=t(67392),l=t(50012);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function E(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function d(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.k6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(s),(0,r.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})}),[s,a])]}function _(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,s=m(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!E({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,u]=d({queryString:t,groupId:a}),[p,_]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,s]=(0,l.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:a}),g=(()=>{const e=c??p;return E({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!E({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),_(e)}),[u,_,s]),tabValues:s}}var g=t(72389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:o,selectValue:c,tabValues:u}=e;const l=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),m=e=>{const n=e.currentTarget,t=l.indexOf(n),a=u[t].value;a!==o&&(p(n),c(a))},E=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,key:n,ref:e=>l.push(e),onKeyDown:E,onClick:m},i,{className:(0,s.Z)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":o===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function k(e){const n=_(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",f.tabList)},r.createElement(b,(0,a.Z)({},e,n)),r.createElement(v,(0,a.Z)({},e,n)))}function R(e){const n=(0,g.Z)();return r.createElement(k,(0,a.Z)({key:String(n)},e))}},43608:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=t(87462),r=(t(67294),t(3905)),s=t(74866),i=t(85162);const o={id:"aws_ec2",title:"aws_ec2",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},c=void 0,u={unversionedId:"modules/aws/aws_ec2",id:"modules/aws/aws_ec2",title:"aws_ec2",description:"Tables",source:"@site/docs/modules/aws/aws_ec2.md",sourceDirName:"modules/aws",slug:"/modules/aws/aws_ec2",permalink:"/docs/next/modules/aws/aws_ec2",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"aws_ec2",title:"aws_ec2",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"aws_dynamo",permalink:"/docs/next/modules/aws/aws_dynamo"},next:{title:"aws_ec2_metadata",permalink:"/docs/next/modules/aws/aws_ec2_metadata"}},l={},p=[{value:"Tables",id:"tables",level:3},{value:"Functions",id:"functions",level:3},{value:"Enums",id:"enums",level:3}],m={toc:p},E="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(E,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{queryString:"view",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"components",label:"Components",default:!0,mdxType:"TabItem"},(0,r.kt)("h3",{id:"tables"},"Tables"),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ec2_entity_general_purpose_volume.GeneralPurposeVolume"},"general_purpose_volume")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ec2_entity_instance.Instance"},"instance")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ec2_entity_instance_block_device_mapping.InstanceBlockDeviceMapping"},"instance_block_device_mapping")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ec2_entity_key_pair.KeyPair"},"key_pair")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ec2_entity_registered_instance.RegisteredInstance"},"registered_instance")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ec2_metadata_entity_instance_metadata.InstanceMetadata"},"instance_metadata")),(0,r.kt)("h3",{id:"functions"},"Functions"),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ec2_rpcs_describe_ami.DescribeAmiRpc"},"describe_ami")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ec2_rpcs_import.KeyPairImportRpc"},"key_pair_import")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/tables/aws_ec2_rpcs_request.KeyPairRequestRpc"},"key_pair_request")),(0,r.kt)("h3",{id:"enums"},"Enums"),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/enums/aws_ec2_entity_general_purpose_volume.GeneralPurposeVolumeType"},"general_purpose_volume_type")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/enums/aws_ec2_entity_general_purpose_volume.VolumeState"},"volume_state")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/enums/aws_ec2_entity_instance.State"},"state")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/enums/aws_ec2_metadata_entity_instance_metadata.Architecture"},"architecture")),(0,r.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,r.kt)("a",{parentName:"p",href:"../../aws/enums/aws_ec2_metadata_entity_instance_metadata.RootDeviceType"},"root_device_type"))),(0,r.kt)(i.Z,{value:"code-examples",label:"Code examples",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("details",{open:"true"},(0,r.kt)("summary",{mdxType:"summary"},"Manage EC2 instances"),(0,r.kt)("codeblock",{language:"sql"},"--- installs the ec2 module\nSELECT * FROM iasql_install('<modules>');\n--- generates a new keypair\nSELECT *\nFROM key_pair_request ('<prefix>-key-request', '<region>');\n--- check new keypair added\nSELECT *\nFROM key_pair\nWHERE name = '<prefix>-key-request';\n--- deletes the keypair\nDELETE FROM key_pair\nWHERE name = '<prefix>-key-request';\n--- imports a new keypair\nSELECT *\nFROM key_pair_import ('<prefix>-key', '<sshRsa>', '<region>');\n--- check new keypair added\nSELECT *\nFROM key_pair\nWHERE name = '<prefix>-key';\n--- check number of instances\nSELECT *\nFROM instance\nWHERE tags ->> 'name' = '<prefix>-2';\n--- deletes security group and instance\nBEGIN;\nDELETE FROM instance  WHERE tags ->> 'name' = '<prefix>-2';\nDELETE FROM security_group WHERE group_name = 'fake-security-group';\nCOMMIT;\n--- check number of instances\nSELECT *\nFROM instance\nWHERE tags ->> 'name' = '<prefix>-1' OR\ntags ->> 'name' = '<prefix>-2';\n--- check user data\nSELECT user_data\nFROM instance\nWHERE tags ->> 'name' = '<prefix>-1';\n--- check number of volumes\nSELECT general_purpose_volume.id FROM general_purpose_volume INNER JOIN instance_block_device_mapping\nON general_purpose_volume.id=instance_block_device_mapping.volume_id\nWHERE instance_block_device_mapping.instance_id IN (SELECT instance.id FROM instance\nWHERE (instance.tags ->> 'name' = '<prefix>-1' OR\ninstance.tags ->> 'name' = '<prefix>-2') AND region='<region>');\n--- create target group and register instance to it\nBEGIN;\nINSERT INTO target_group (target_group_name, target_type, protocol, port, health_check_path)\nVALUES ('<tgName>', '<tgType>', '<protocol>',<tgPort>, '/health');\n\nINSERT INTO registered_instance (instance, target_group_id)\nSELECT (SELECT id FROM instance WHERE tags ->> 'name' = '<prefix>-1' AND region='<region>'), (SELECT id FROM target_group WHERE target_group_name = '<tgName>');\nCOMMIT;\n--- check target group count\nSELECT *\nFROM target_group\nWHERE target_group_name = '<tgName>';\n--- check registered instance count\nSELECT *\nFROM registered_instance\nWHERE target_group_id = (SELECT id FROM target_group WHERE target_group_name = '<tgName>');\n--- check registered instance port\nSELECT *\nFROM registered_instance\nINNER JOIN instance ON instance.id = registered_instance.instance\nWHERE target_group_id = (SELECT id FROM target_group WHERE target_group_name = '<tgName>') AND instance.tags ->> 'name' = '<prefix>-1';\n--- register instance with custom port to target group\nINSERT INTO registered_instance (instance, target_group_id, port)\nSELECT (SELECT id FROM instance WHERE tags ->> 'name' = '<prefix>-2' AND region='<region>'), (SELECT id FROM target_group WHERE target_group_name = '<tgName>'),<instancePort>;\n--- updates register instance with custom port to target group\nUPDATE registered_instance\nSET port =<tgName>FROM instance\nWHERE instance.id = registered_instance.instance AND target_group_id = (SELECT id FROM target_group WHERE target_group_name = '<prefix>') AND instance.tags ->> 'name' = '-2';\n--- stop instance\nUPDATE instance SET state = 'stopped'\nWHERE tags ->> 'name' = '<prefix>-2';\n--- start instance\nUPDATE instance SET state = 'running' WHERE tags ->> 'name' = '<prefix>-2';\n--- hibernates instance\nUPDATE instance SET state = 'hibernate'\nWHERE tags ->> 'name' = '<prefix>-2';\n--- check number of instances\nSELECT *\nFROM instance\nWHERE tags ->> 'name' = '<prefix>-nosg';\n--- deletes one of the registered instances\nDELETE FROM registered_instance\nUSING instance\nWHERE instance.tags ->> 'name' = '<prefix>-1' AND instance.id = registered_instance.instance;\n--- check instance metadata\nSELECT *\nFROM instance_metadata\nWHERE instance_id = (\nSELECT instance_id\nFROM instance\nWHERE tags ->> 'name' = '<prefix>-1'\n);\n--- deletes all ec2 instances\nDELETE FROM instance\nWHERE tags ->> 'name' = '<prefix>-nosg' OR\ntags ->> 'name' = '<prefix>-1' OR\ntags ->> 'name' = '<prefix>-2';\n--- deletes the target group\nDELETE FROM target_group\nWHERE target_group_name = '<tgName>';\n")),(0,r.kt)("details",{open:"true"},(0,r.kt)("summary",{mdxType:"summary"},"Move instance from region"),(0,r.kt)("codeblock",{language:"sql"},"--- moves the instance to another region\nBEGIN;\n\n-- You can't move a registered instance at all, so unregister it\nDELETE FROM registered_instance WHERE instance = (\nSELECT id FROM instance WHERE tags ->> 'name' = '<prefix>-1'\n);\n-- We have to make sure the subnet is correct and we have to re-assign the AMI ID because they\n-- are different between regions\nDELETE FROM instance_block_device_mapping WHERE instance_id = (SELECT id FROM instance WHERE tags ->> 'name' = '<prefix>-1');\nUPDATE instance set region='us-east-1', ami = '<ubuntuAmiId>',\nsubnet_id = (\nSELECT id FROM subnet WHERE region = 'us-east-1' AND availability_zone = 'us-east-1a'\n) WHERE tags ->> 'name' = '<prefix>-1';\n\n-- Also need to drop the security groups it is currently attached to. This is done with a join\n-- table so we get no good constraint checking on the validity here at the moment\nDELETE FROM instance_security_groups WHERE instance_id = (\nSELECT id FROM instance WHERE tags ->> 'name' = '<prefix>-1'\n);\n\nCOMMIT;\n--- check number of instances\nSELECT *\nFROM instance\nWHERE tags ->> 'name' = '<prefix>-1';\n")),(0,r.kt)("details",{open:"true"},(0,r.kt)("summary",{mdxType:"summary"},"Manage volumes"),(0,r.kt)("codeblock",{language:"sql"},"--- installs the module\nSELECT * FROM iasql_install('<modules>');\n--- check number of instances\nSELECT *\nFROM instance\nWHERE tags ->> 'name' = '<prefix>-1';\n--- check number of volumes\nSELECT *\nFROM general_purpose_volume INNER JOIN instance_block_device_mapping ON general_purpose_volume.id = instance_block_device_mapping.volume_id\nWHERE instance_block_device_mapping.instance_id = (SELECT id FROM instance WHERE tags ->> 'name' = '<prefix>-1');\n--- check extra volume has been created\nSELECT *\nFROM general_purpose_volume INNER JOIN instance_block_device_mapping ON general_purpose_volume.id = instance_block_device_mapping.volume_id\nWHERE instance_block_device_mapping.instance_id = (SELECT id FROM instance WHERE tags ->> 'name' = '<prefix>-1');\n--- check number of instances\nSELECT *\nFROM instance\nWHERE tags ->> 'name' = '<prefix>-2';\n--- check number of volumes\nSELECT *\nFROM general_purpose_volume INNER JOIN instance_block_device_mapping ON general_purpose_volume.id = instance_block_device_mapping.volume_id\nWHERE instance_block_device_mapping.instance_id = (SELECT id FROM instance WHERE tags ->> 'name' = '<prefix>-2');\n--- check number of volumes\nSELECT *\nFROM general_purpose_volume INNER JOIN instance_block_device_mapping ON general_purpose_volume.id = instance_block_device_mapping.volume_id\nWHERE instance_block_device_mapping.instance_id = (SELECT id FROM instance WHERE tags ->> 'name' = '<prefix>-1' OR tags ->> 'name' = '<prefix>-2');\n--- checks volume count\nSELECT *\nFROM general_purpose_volume\nWHERE tags ->> 'Name' = '<gp2VolumeName>' OR tags ->> 'Name' = '<gp3VolumeName>';\n--- tries to update a volume size\nUPDATE general_purpose_volume SET size = 150 WHERE tags ->> 'Name' = '<gp3VolumeName>';\n--- checks volume update\nSELECT *\nFROM general_purpose_volume\nWHERE tags ->> 'Name' = '<gp3VolumeName>';\n--- deletes the volumes\nDELETE FROM general_purpose_volume\nWHERE tags ->> 'Name' = '<gp2VolumeName>' OR tags ->> 'Name' = '<gp3VolumeName>';\n--- gets information about an AMI\nSELECT * from describe_ami('<ubuntuAmiId>');\n"))))))}d.isMDXComponent=!0}}]);