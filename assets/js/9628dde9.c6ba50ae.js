"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53054],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>d});var a=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},c=Object.keys(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)n=c[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},i=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},b="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,c=e.originalType,o=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),b=u(n),p=s,d=b["".concat(o,".").concat(p)]||b[p]||m[p]||c;return n?a.createElement(d,r(r({ref:t},i),{},{components:n})):a.createElement(d,r({ref:t},i))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var c=n.length,r=new Array(c);r[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[b]="string"==typeof e?e:s,r[1]=l;for(var u=2;u<c;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},85162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(67294),s=n(86010);const c={tabItem:"tabItem_Ymn6"};function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,s.Z)(c.tabItem,r),hidden:n},t)}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(87462),s=n(67294),c=n(86010),r=n(12466),l=n(16550),o=n(91980),u=n(67392),i=n(50012);function b(e){return function(e){return s.Children.map(e,(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:s}}=e;return{value:t,label:n,attributes:a,default:s}}))}function m(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??b(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function d(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),c=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(c),(0,s.useCallback)((e=>{if(!c)return;const t=new URLSearchParams(a.location.search);t.set(c,e),a.replace({...a.location,search:t.toString()})}),[c,a])]}function k(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,c=m(e),[r,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:c}))),[o,u]=d({queryString:n,groupId:a}),[b,k]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,c]=(0,i.Nk)(n);return[a,(0,s.useCallback)((e=>{n&&c.set(e)}),[n,c])]}({groupId:a}),_=(()=>{const e=o??b;return p({value:e,tabValues:c})?e:null})();(0,s.useLayoutEffect)((()=>{_&&l(_)}),[_]);return{selectedValue:r,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:c}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),k(e)}),[u,k,c]),tabValues:c}}var _=n(72389);const E={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(e){let{className:t,block:n,selectedValue:l,selectValue:o,tabValues:u}=e;const i=[],{blockElementScrollPositionUntilNextRender:b}=(0,r.o5)(),m=e=>{const t=e.currentTarget,n=i.indexOf(t),a=u[n].value;a!==l&&(b(t),o(a))},p=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:r}=e;return s.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>i.push(e),onKeyDown:p,onClick:m},r,{className:(0,c.Z)("tabs__item",E.tabItem,r?.className,{"tabs__item--active":l===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const c=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=c.find((e=>e.props.value===a));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},c.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function h(e){const t=k(e);return s.createElement("div",{className:(0,c.Z)("tabs-container",E.tabList)},s.createElement(f,(0,a.Z)({},e,t)),s.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,_.Z)();return s.createElement(h,(0,a.Z)({key:String(t)},e))}},18723:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>u,toc:()=>b});var a=n(87462),s=(n(67294),n(3905)),c=n(74866),r=n(85162);const l={id:"aws_s3",title:"aws_s3",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},o=void 0,u={unversionedId:"modules/aws/aws_s3",id:"version-0.1.9/modules/aws/aws_s3",title:"aws_s3",description:"Tables",source:"@site/versioned_docs/version-0.1.9/modules/aws/aws_s3.md",sourceDirName:"modules/aws",slug:"/modules/aws/aws_s3",permalink:"/docs/modules/aws/aws_s3",draft:!1,editUrl:null,tags:[],version:"0.1.9",frontMatter:{id:"aws_s3",title:"aws_s3",hide_table_of_contents:!0,custom_edit_url:null,displayed_sidebar:"docs"},sidebar:"docs",previous:{title:"aws_route53",permalink:"/docs/modules/aws/aws_route53"},next:{title:"aws_sdk",permalink:"/docs/modules/aws/aws_sdk"}},i={},b=[{value:"Tables",id:"tables",level:3},{value:"Functions",id:"functions",level:3}],m={toc:b},p="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(p,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(c.Z,{queryString:"view",mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"components",label:"Components",default:!0,mdxType:"TabItem"},(0,s.kt)("h3",{id:"tables"},"Tables"),(0,s.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,s.kt)("a",{parentName:"p",href:"../../aws/tables/aws_s3_entity_bucket.Bucket"},"bucket")),(0,s.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,s.kt)("a",{parentName:"p",href:"../../aws/tables/aws_s3_entity_bucket_object.BucketObject"},"bucket_object")),(0,s.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,s.kt)("a",{parentName:"p",href:"../../aws/tables/aws_s3_entity_bucket_website.BucketWebsite"},"bucket_website")),(0,s.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,s.kt)("a",{parentName:"p",href:"../../aws/tables/aws_s3_entity_public_access_block.PublicAccessBlock"},"public_access_block")),(0,s.kt)("h3",{id:"functions"},"Functions"),(0,s.kt)("p",null,"\xa0\xa0\xa0\xa0",(0,s.kt)("a",{parentName:"p",href:"../../aws/tables/aws_s3_rpcs_s3_upload_object.S3UploadObjectRpc"},"s3_upload_object"))),(0,s.kt)(r.Z,{value:"code-examples",label:"Code examples",mdxType:"TabItem"},(0,s.kt)("p",null,(0,s.kt)("details",{open:"true"},(0,s.kt)("summary",{mdxType:"summary"},"Manage buckets"),(0,s.kt)("codeblock",{language:"sql"},"--- installs the s3 module\nSELECT * FROM iasql_install('<modules>');\n--- adds a new s3 bucket without policy\nINSERT INTO bucket (name)\nVALUES ('<s3NameNoPolicy>');\n--- check s3 insertion\nSELECT *\nFROM bucket\nWHERE name = '<s3NameNoPolicy>';\n--- deletes new s3 bucket without policy\nDELETE FROM bucket\nWHERE name = '<s3NameNoPolicy>';\n--- check s3 deletion\nSELECT *\nFROM bucket\nWHERE name = '<s3NameNoPolicy>';\n--- adds a new s3 bucket\nINSERT INTO bucket (name, policy)\nVALUES ('<s3Name>', '<policyDocument>');\n--- adds content to bucket\nSELECT * FROM s3_upload_object('<s3Name>', 'iasql_message', '<bucketContent>', 'application/json');\n--- adds new content to bucket\nSELECT * FROM s3_upload_object('<s3Name>', 'iasql_message_1', '<bucketContent>', 'application/json');\n--- check object insertion\nSELECT *\nFROM bucket_object\nWHERE bucket_name = '<s3Name>';\n--- deletes one object of the bucket\nDELETE FROM bucket_object WHERE bucket_name = '<s3Name>' AND key='iasql_message';\n--- check object deletion\nSELECT *\nFROM bucket_object\nWHERE bucket_name = '<s3Name>' AND key='iasql_message';\n--- gets current bucket policy document\nSELECT * FROM bucket WHERE name = '<s3Name>';\n--- cleans the bucket\nDELETE FROM bucket_object WHERE bucket_name='<s3Name>';\n--- check no s3 objects still exist\nSELECT *\nFROM bucket_object\nWHERE bucket_name = '<s3Name>';\n--- adds a new public access block entry\nINSERT INTO public_access_block (bucket_name, block_public_acls, ignore_public_acls, block_public_policy,\nrestrict_public_buckets)\nVALUES ('<s3Name>', false, false, false, false);\n--- checks the public access block exists\nSELECT *\nFROM public_access_block\nWHERE bucket_name = '<s3Name>'\nAND block_public_acls = FALSE\nAND ignore_public_acls = FALSE\nAND block_public_policy = FALSE\nAND restrict_public_buckets = FALSE;\n--- change the public access block\nUPDATE public_access_block\nSET block_public_acls = true\nWHERE bucket_name = '<s3Name>';\n--- checks public access block is updated\nSELECT *\nFROM public_access_block\nWHERE bucket_name = '<s3Name>'\nAND block_public_acls = TRUE\nAND ignore_public_acls = FALSE\nAND block_public_policy = FALSE\nAND restrict_public_buckets = FALSE;\n--- removes the public block entry\nDELETE\nFROM public_access_block\nWHERE bucket_name = '<s3Name>';\n--- adds a static website to bucket\nINSERT INTO bucket_website (bucket_name, index_document)\nVALUES ('<s3Name>', 'index.html');\n--- checks the static website exists\nSELECT *\nFROM bucket_website\nWHERE bucket_name = '<s3Name>'\nAND index_document = 'index.html';\n--- change the static website\nUPDATE bucket_website\nSET error_document = 'error.html'\nWHERE bucket_name = '<s3Name>';\n--- checks static website is updated\nSELECT *\nFROM bucket_website\nWHERE bucket_name = '<s3Name>'\nAND index_document = 'index.html' AND error_document = 'error.html';\n--- removes the static website\nDELETE\nFROM bucket_website\nWHERE bucket_name = '<s3Name>';\n")),(0,s.kt)("details",{open:"true"},(0,s.kt)("summary",{mdxType:"summary"},"Manage policies"),(0,s.kt)("codeblock",{language:"sql"},"--- updates the bucket policy\nUPDATE bucket SET policy='<newPolicyDocument>' WHERE name = '<s3Name>';\n--- gets current bucket policy with updated document\nSELECT * FROM bucket WHERE name = '<s3Name>';\n"))))))}d.isMDXComponent=!0}}]);