"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[67840],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return a?n.createElement(h,s(s({ref:t},p),{},{components:a})):n.createElement(h,s({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},98068:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var n=a(87462),r=(a(67294),a(3905)),o=a(44996),s=a(50941);const i={sidebar_position:2,date:new Date("2022-12-15T00:00:00.000Z"),title:"Deploy containerized app to Fargate (Prisma)",slug:"/prisma",tags:["tutorial"]},l=void 0,c={permalink:"/blog/prisma",editUrl:"https://github.com/alantech/iasql/tree/main/site/blog/tutorials/prisma.mdx",source:"@site/blog/tutorials/prisma.mdx",title:"Deploy containerized app to Fargate (Prisma)",description:"In this tutorial, we will use a script that uses Prisma to introspect the schema of an IaSQL database and deploy a Node.js HTTP server within a docker container on your AWS account using Fargate ECS, IAM, ECR, and ELB. IaSQL is an open-source software tool that creates a two-way connection between an unmodified PostgreSQL database and an AWS account so you can manage your infrastructure from a database. The container image will be hosted as a private repository in ECR and deployed to ECS using Fargate.",date:"2022-12-15T00:00:00.000Z",formattedDate:"December 15, 2022",tags:[{label:"tutorial",permalink:"/blog/tags/tutorial"}],readingTime:6.335,hasTruncateMarker:!0,authors:[],frontMatter:{sidebar_position:2,date:"2022-12-15T00:00:00.000Z",title:"Deploy containerized app to Fargate (Prisma)",slug:"/prisma",tags:["tutorial"]},prevItem:{title:"Deploy containerized app to Fargate (Django)",permalink:"/blog/django"},nextItem:{title:"Deploy containerized app to ECS Fargate",permalink:"/blog/fargate"}},p={authorsImageUrls:[]},u=[{value:"Start managing an AWS account with a PostgreSQL IaSQL db",id:"start-managing-an-aws-account-with-a-postgresql-iasql-db",level:2},{value:"Add the necessary cloud services to the PostgreSQL database",id:"add-the-necessary-cloud-services-to-the-postgresql-database",level:2},{value:"Connect to the PostgreSQL db and provision cloud resources in your AWS account",id:"connect-to-the-postgresql-db-and-provision-cloud-resources-in-your-aws-account",level:2},{value:"Login, build and push your code to the container registry",id:"login-build-and-push-your-code-to-the-container-registry",level:2},{value:"Delete Managed Cloud Resources",id:"delete-managed-cloud-resources",level:2}],d={toc:u},m="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this tutorial, we will use a script that uses ",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io"},"Prisma")," to introspect the schema of an IaSQL database and deploy a Node.js HTTP server within a docker container on your AWS account using Fargate ECS, IAM, ECR, and ELB. IaSQL is an ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/alantech/iasql"},"open-source")," software tool that creates a two-way connection between an unmodified PostgreSQL database and an AWS account so you can manage your infrastructure from a database. The container image will be hosted as a private repository in ECR and deployed to ECS using Fargate."),(0,r.kt)("p",null,"The code for this tutorial lives in this part of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/alantech/iasql/tree/main/examples/ecs-fargate/prisma/infra/index.js"},"repository"),"."),(0,r.kt)("h2",{id:"start-managing-an-aws-account-with-a-postgresql-iasql-db"},"Start managing an AWS account with a PostgreSQL IaSQL db"),(0,r.kt)("p",null,"First, make sure you have an ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users.html"},"IAM user")," in AWS or create one with ",(0,r.kt)("strong",{parentName:"p"},"Programmatic access")," through the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_console"},"console/UI")," or ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html#id_users_create_cliwpsapi"},"CLI"),". Ensure that the IAM role has sufficient permissions to deploy and manage all your infrastructure resources."),(0,r.kt)("p",null,"There are two parts to each ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html#access-keys-and-secret-access-keys"},"access key"),", which you\u2019ll see in the IAM console/CLI after you create it, an id and a secret. Input these in the connect account modal:"),(0,r.kt)(s.Z,{alt:"Connect",style:{width:"440"},sources:{light:(0,o.Z)("/screenshots/connect.png"),dark:(0,o.Z)("/screenshots/connect_dark.png")},mdxType:"ThemedImage"}),(0,r.kt)("p",null,"If you use the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/cli/"},"AWS CLI"),", you can look at the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/sdkref/latest/guide/file-location.html"},"credentials configured locally"),". In macOS and Linux this is as simple as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ cat ~/.aws/credentials\n[default]\naws_access_key_id = <YOUR_ACCESS_KEY_ID>\naws_secret_access_key = <YOUR_SECRET_ACCESS_KEY>\n")),(0,r.kt)("p",null,"You will be able to see your PostgreSQL connection information when you press Connect."),(0,r.kt)(s.Z,{alt:"Credentials",style:{width:"440",border:"2px solid rgba(52, 52, 52, 0.1)"},sources:{light:(0,o.Z)("/screenshots/credentials.png"),dark:(0,o.Z)("/screenshots/credentials_dark.png")},mdxType:"ThemedImage"}),(0,r.kt)("p",null,"Make sure to copy the PostgreSQL connection string as you will not see it again."),(0,r.kt)("h2",{id:"add-the-necessary-cloud-services-to-the-postgresql-database"},"Add the necessary cloud services to the PostgreSQL database"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"iasql_install")," SQL function to install ",(0,r.kt)("a",{parentName:"p",href:"/docs/module"},"modules")," into the PostgreSQL database."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * from iasql_install(\n  'aws_ecs_simplified'\n);\n")),(0,r.kt)("p",null,"If the function call is successful, it will return a virtual table with a record for each new table in your database under ",(0,r.kt)("inlineCode",{parentName:"p"},"created_table_name")," and the number of existing resources or records imported from the account under ",(0,r.kt)("inlineCode",{parentName:"p"},"record_count"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"       module_name        |      created_table_name       | record_count\n--------------------------+-------------------------------+--------------\n aws_cloudwatch           | log_group                     |            0\n aws_iam                  | iam_role                      |            0\n aws_ecr                  | public_repository             |            0\n aws_ecr                  | repository                    |            1\n aws_ecr                  | repository_policy             |            0\n aws_security_group       | security_group                |            2\n aws_security_group       | security_group_rule           |            0\n aws_vpc                  | vpc                           |            1\n aws_vpc                  | subnet                        |            3\n aws_elb                  | load_balancer                 |            0\n aws_elb                  | target_group                  |            0\n aws_elb                  | listener                      |            0\n aws_elb                  | load_balancer_security_groups |            0\n aws_ecs_fargate          | cluster                       |            0\n aws_ecs_fargate          | service                       |            0\n aws_ecs_fargate          | task_definition               |            0\n aws_ecs_fargate          | container_definition          |            0\n aws_ecs_fargate          | service_security_groups       |            0\n aws_ecs_simplified       | ecs_simplified                |            0\n(17 rows)\n")),(0,r.kt)("h2",{id:"connect-to-the-postgresql-db-and-provision-cloud-resources-in-your-aws-account"},"Connect to the PostgreSQL db and provision cloud resources in your AWS account"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get a local copy of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/alantech/iasql/tree/main/examples/ecs-fargate/prisma"},"ECS Fargate examples code"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install the Node.js project dependencies under the ",(0,r.kt)("inlineCode",{parentName:"p"},"prisma/infra")," folder"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd infra\nnpm i\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Modify the ",(0,r.kt)("a",{parentName:"li",href:"https://www.prisma.io/docs/guides/development-environment/environment-variables"},(0,r.kt)("inlineCode",{parentName:"a"},".env file"))," that Prisma expects with the connection parameters provided on db creation. You'll need to add your ",(0,r.kt)("a",{parentName:"li",href:"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token"},"Github personal access token")," for the ",(0,r.kt)("inlineCode",{parentName:"li"},"ecr_build")," SQL function to be able to do the pull. Also, if you're going to deploy a codebase other than the default one, set the ",(0,r.kt)("inlineCode",{parentName:"li"},"REPO_URI")," variable. In this case:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="prisma/infra/.env"',title:'"prisma/infra/.env"'},'DATABASE_URL="postgres://d0va6ywg:nfdDh#EP4CyzveFr@localhost:5432/_4b2bb09a59a411e4"\nGH_PAT=ghp_XXX\nREPO_URI="https://github.com/alantech/iasql"\n')),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},"(Optional) Set the desired project name that your resources will be named after by changing the ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," in the ",(0,r.kt)("inlineCode",{parentName:"li"},"my_project/infra/package.json"),". If the name is not changed, ",(0,r.kt)("inlineCode",{parentName:"li"},"quickstart")," will be used.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"project-name")," can only contain alphanumeric characters and hyphens(-) because it will be used to name the load balancer")),(0,r.kt)("ol",{start:5},(0,r.kt)("li",{parentName:"ol"},"Per the ",(0,r.kt)("a",{parentName:"li",href:"https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-postgres"},"Prisma quickstart to add an existing project"),", create a basic ",(0,r.kt)("inlineCode",{parentName:"li"},"schema.prisma")," file.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="prisma/infra/prisma/schema.prisma"',title:'"prisma/infra/prisma/schema.prisma"'},'datasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n')),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"Pull, or introspect, the schema from your database which will auto-populate the rest of the ",(0,r.kt)("inlineCode",{parentName:"li"},"schema.prisma")," file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npx prisma db pull\n")),(0,r.kt)("ol",{start:7},(0,r.kt)("li",{parentName:"ol"},"Now install and generate the Prisma client by the introspected ",(0,r.kt)("inlineCode",{parentName:"li"},"schema.prisma"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npx prisma generate\n")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you install or uninstall IaSQL ",(0,r.kt)("a",{parentName:"p",href:"/docs/module"},"modules")," the database schema will change and you will need to run steps 5 through 7 to\nintrospect the correct schema once again.")),(0,r.kt)("ol",{start:8},(0,r.kt)("li",{parentName:"ol"},"Run the existing script using the Prisma entities")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node index.js\n")),(0,r.kt)("p",null,"This will run the following ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/alantech/iasql/tree/main/examples/ecs-fargate/prisma/infra/index.js"},"code")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="prisma/infra/index.js"',title:'"prisma/infra/index.js"'},"async function main() {\n  await prisma.$queryRaw`SELECT * FROM iasql_begin();`;\n  const data = {\n    app_name: APP_NAME,\n    public_ip: true,\n    app_port: PORT,\n    image_tag: 'latest',\n  };\n  await prisma.ecs_simplified.upsert({\n    where: { app_name: APP_NAME },\n    create: data,\n    update: data,\n  });\n\n  const commit = await prisma.$queryRaw`SELECT *\n                                       from iasql_commit();`;\n  console.dir(commit);\n\n  console.log('Using ecr_build to build the docker image and push it to ECR...');\n  const repoId = (await prisma.repository.findFirst({\n    where: { repository_name: `${APP_NAME}-repository` },\n    select: { id: true },\n  })).id.toString();\n  let repoUri;\n  if (REPO_URI) // manual\n    repoUri = REPO_URI;\n  else if (GITHUB_SERVER_URL && GITHUB_REPOSITORY) // CI\n    repoUri = `${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}`;\n  else\n    repoUri = 'https://github.com/alantech/iasql'\n  const image = await prisma.$queryRaw`SELECT ecr_build(\n              ${repoUri},\n              ${repoId},\n              './examples/ecs-fargate/prisma/app',\n              ${GITHUB_REF},\n              ${GH_PAT}\n  );`;\n  console.log(image);\n}\n")),(0,r.kt)("p",null,"It'll use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ecs_simplified")," module to create all the necessary AWS resources needed for you app to run (load balancer, ECR repository, IAM role, etc). If the function call is successful, it will return a virtual table with a record for each cloud resource that has been created, deleted or updated."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"}," action |    table_name       |   id   |      description      \n--------+---------------------+--------+-----------------------\n create | public_repository   |      2 | quickstart-repository\n create | cluster             |      2 | 2\n create | task_definition     |      2 | 2\n create | service             |      2 | 2\n create | listener            |      2 | 2\n create | load_balancer       |      2 | 2\n create | target_group        |      2 | 2\n create | security_group      |      5 | 5\n create | security_group_rule |      3 | 3\n create | security_group_rule |      4 | 4\n create | role                |        | ecsTaskExecRole\n")),(0,r.kt)("h2",{id:"login-build-and-push-your-code-to-the-container-registry"},"Login, build and push your code to the container registry"),(0,r.kt)("p",null,"Previously, you needed to manually build and push your image to the ECR. But recently we've added the high-level ",(0,r.kt)("inlineCode",{parentName:"p"},"ecr_build")," SQL function which does all those steps automatically. It will do the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Pull the code from your Github repository"),(0,r.kt)("li",{parentName:"ul"},"Build the Docker image in the directory you've specified"),(0,r.kt)("li",{parentName:"ul"},"Push the image to the ECR repository you've provided")),(0,r.kt)("p",null,"All of these steps will be done in a CodeBuild project in your AWS account. To use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ecr_build")," function, you can run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT ecr_build(\n   'https://github.com/alantech/iasql/', -- replace with your own Github repo if you want to use your own codebase\n   (SELECT id\n    FROM repository\n    WHERE repository_name = 'quickstart-repository')::varchar(255), -- replace quickstart if you've changed the project name\n   './examples/ecs-fargate/prisma/app', -- the sub directory in the Github repo that the image should be built in\n   'main', -- the Github repo branch name\n   '' -- replace your github personal access token here if the repo is private\n);\n")),(0,r.kt)("p",null,"That command is already being run in the ",(0,r.kt)("inlineCode",{parentName:"p"},"infra/index.js")," script. So no need for extra steps if you're using it."),(0,r.kt)("p",null,"After running the above SQL command to completion, you can check the running app using the load balancer DNS name. To grab the name, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"QUICKSTART_LB_DNS=$(psql -At 'postgres://d0va6ywg:nfdDh#EP4CyzveFr@localhost:5432/_4b2bb09a59a411e4' -c \"\nSELECT dns_name\nFROM load_balancer\nWHERE load_balancer_name = '<project-name>-load-balancer';\")\n")),(0,r.kt)("p",null,"And then connect to your service!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"curl ${QUICKSTART_LB_DNS}:8088/health\n")),(0,r.kt)("h2",{id:"delete-managed-cloud-resources"},"Delete Managed Cloud Resources"),(0,r.kt)("p",null,"Delete the resources created by this tutorial using the following SQL code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql",metastring:'title="psql postgres://qpp3pzqb:LN6jnHfhRJTBD6ia@localhost:5432/_3ba201e349a11daf -c"',title:'"psql',"postgres://qpp3pzqb:LN6jnHfhRJTBD6ia@localhost:5432/_3ba201e349a11daf":!0,'-c"':!0},"DELETE FROM repository_image WHERE private_repository_id = (SELECT id FROM repository WHERE repository_name = 'quickstart-repository');\nDELETE FROM ecs_simplified WHERE app_name = 'quickstart';\n")))}h.isMDXComponent=!0}}]);